{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationTranslatorRecognizer = exports.ConversationRecognizerFactory = void 0;\n\nvar Exports_1 = require(\"../../common.speech/Exports\");\n\nvar Exports_2 = require(\"../../common/Exports\");\n\nvar Contracts_1 = require(\"../../sdk/Contracts\");\n\nvar Exports_3 = require(\"../../sdk/Exports\");\n\nvar ConversationConnectionFactory_1 = require(\"./ConversationConnectionFactory\");\n\nvar ConversationServiceAdapter_1 = require(\"./ConversationServiceAdapter\");\n\nvar ConversationRecognizerFactory = function () {\n  function ConversationRecognizerFactory() {}\n\n  ConversationRecognizerFactory.fromConfig = function (conversation, speechConfig, audioConfig) {\n    return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\n  };\n\n  return ConversationRecognizerFactory;\n}();\n\nexports.ConversationRecognizerFactory = ConversationRecognizerFactory;\n/**\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\n * Based off the recognizers in the SDK folder.\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar ConversationTranslatorRecognizer = function (_super) {\n  __extends(ConversationTranslatorRecognizer, _super);\n\n  function ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig) {\n    var _this = this;\n\n    var serviceConfigImpl = speechConfig;\n    Contracts_1.Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\n    var conversationImpl = conversation;\n    Contracts_1.Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\n    _this = _super.call(this, audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory_1.ConversationConnectionFactory()) || this;\n    _this.privConversation = conversationImpl;\n    _this.privIsDisposed = false;\n    _this.privProperties = serviceConfigImpl.properties.clone();\n    _this.privConnection = Exports_3.Connection.fromRecognizer(_this);\n    _this.privSetTimeout = typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\" ? Exports_2.Timeout.setTimeout : setTimeout;\n    _this.privClearTimeout = typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\" ? Exports_2.Timeout.clearTimeout : clearTimeout;\n    return _this;\n  }\n\n  Object.defineProperty(ConversationTranslatorRecognizer.prototype, \"connected\", {\n    set: function (cb) {\n      this.privConnection.connected = cb;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationTranslatorRecognizer.prototype, \"disconnected\", {\n    set: function (cb) {\n      this.privConnection.disconnected = cb;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationTranslatorRecognizer.prototype, \"speechRecognitionLanguage\", {\n    /**\n     * Return the speech language used by the recognizer\n     */\n    get: function () {\n      return this.privSpeechRecognitionLanguage;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationTranslatorRecognizer.prototype, \"properties\", {\n    /**\n     * Return the properties for the recognizer\n     */\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ConversationTranslatorRecognizer.prototype.isDisposed = function () {\n    return this.privIsDisposed;\n  };\n  /**\n   * Connect to the recognizer\n   * @param token\n   */\n\n\n  ConversationTranslatorRecognizer.prototype.connect = function (token, cb, err) {\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.privReco.conversationTranslatorToken = token;\n      this.resetConversationTimeout();\n      this.privReco.connectAsync(cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          var typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  };\n  /**\n   * Disconnect from the recognizer\n   */\n\n\n  ConversationTranslatorRecognizer.prototype.disconnect = function (cb, err) {\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n\n      if (this.privTimeoutToken !== undefined) {\n        this.privClearTimeout(this.privTimeoutToken);\n      }\n\n      this.privReco.disconnect().then(function () {\n        if (!!cb) {\n          cb();\n        }\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          var typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true).catch(function (reason) {\n        Exports_2.Events.instance.onEvent(new Exports_2.BackgroundEvent(reason));\n      });\n    }\n  };\n  /**\n   * Send the mute all participants command to the websocket\n   * @param conversationId\n   * @param participantId\n   * @param isMuted\n   */\n\n\n  ConversationTranslatorRecognizer.prototype.sendRequest = function (command, cb, err) {\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      this.sendMessage(command, cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          var typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true).catch(function (reason) {\n        Exports_2.Events.instance.onEvent(new Exports_2.BackgroundEvent(reason));\n      });\n    }\n  };\n  /**\n   * Close and dispose the recognizer\n   */\n\n\n  ConversationTranslatorRecognizer.prototype.close = function () {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n            (_a = this.privConnection) === null || _a === void 0 ? void 0 : _a.closeConnection();\n            (_b = this.privConnection) === null || _b === void 0 ? void 0 : _b.close();\n            this.privConnection = undefined;\n            return [4\n            /*yield*/\n            , this.dispose(true)];\n\n          case 1:\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Dispose the recognizer\n   * @param disposing\n   */\n\n\n  ConversationTranslatorRecognizer.prototype.dispose = function (disposing) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.privIsDisposed) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!disposing) return [3\n            /*break*/\n            , 2];\n\n            if (this.privTimeoutToken !== undefined) {\n              this.privClearTimeout(this.privTimeoutToken);\n            }\n\n            this.privIsDisposed = true;\n\n            if (!!this.privConnection) {\n              this.privConnection.closeConnection();\n              this.privConnection.close();\n              this.privConnection = undefined;\n            }\n\n            return [4\n            /*yield*/\n            , _super.prototype.dispose.call(this, disposing)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Create the config for the recognizer\n   * @param speechConfig\n   */\n\n\n  ConversationTranslatorRecognizer.prototype.createRecognizerConfig = function (speechConfig) {\n    return new Exports_1.RecognizerConfig(speechConfig, this.privProperties);\n  };\n  /**\n   * Create the service recognizer.\n   * The audio source is redundnant here but is required by the implementation.\n   * @param authentication\n   * @param connectionFactory\n   * @param audioConfig\n   * @param recognizerConfig\n   */\n\n\n  ConversationTranslatorRecognizer.prototype.createServiceRecognizer = function (authentication, connectionFactory, audioConfig, recognizerConfig) {\n    var audioSource = audioConfig;\n    return new ConversationServiceAdapter_1.ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  };\n\n  ConversationTranslatorRecognizer.prototype.sendMessage = function (msg, cb, err) {\n    var withAsync = this.privReco;\n\n    function PromiseToEmptyCallback(promise, cb, err) {\n      if (!!promise) {\n        promise.then(function (result) {\n          try {\n            if (!!cb) {\n              cb();\n            }\n          } catch (e) {\n            if (!!err) {\n              err(\"'Unhandled error on promise callback: \" + e + \"'\");\n            }\n          }\n        }, function (reason) {\n          try {\n            if (!!err) {\n              err(reason);\n            }\n            /* tslint:disable:no-empty */\n\n          } catch (error) {}\n        });\n      } else {\n        if (!!err) {\n          err(\"Null promise\");\n        }\n      }\n    }\n\n    PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\n    this.resetConversationTimeout();\n  };\n\n  ConversationTranslatorRecognizer.prototype.resetConversationTimeout = function () {\n    var _this = this;\n\n    if (this.privTimeoutToken !== undefined) {\n      this.privClearTimeout(this.privTimeoutToken);\n    }\n\n    this.privTimeoutToken = this.privSetTimeout(function () {\n      _this.sendRequest(_this.privConversation.getKeepAlive());\n    }, 60000);\n  };\n\n  return ConversationTranslatorRecognizer;\n}(Exports_3.Recognizer);\n\nexports.ConversationTranslatorRecognizer = ConversationTranslatorRecognizer;","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationTranslatorRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout\r\n} from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationRecognizer,\r\n    ConversationTranslatorMessageTypes\r\n} from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        this.privSetTimeout = (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") ? Timeout.setTimeout : setTimeout;\r\n        this.privClearTimeout = (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") ? Timeout.clearTimeout : clearTimeout;\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n        this.privConnection?.closeConnection();\r\n        this.privConnection?.close();\r\n        this.privConnection = undefined;\r\n        await this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        function PromiseToEmptyCallback<T>(promise: Promise<T>, cb?: Callback, err?: Callback): void {\r\n            if (!!promise) {\r\n                promise.then((result: T): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any) => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                    }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        }\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}