{"ast":null,"code":"/*\nEXAMPLE: SearchL2 + ProvL1 + AskL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nCODE-SWITCHING BUTTON (L2 → L1)\nS> Mermelada (<trans: jam>)\nS> ¿Cómo se dice? (<trans: how do you say it?)\nCODE-SWITCHING BUTTON (L1 → L2)??\nT> Jam\nS> Jam\nT> Mhm\n\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nT> \n*/\nimport { send } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nconst esDict = {\n  'mermelada': 'jam',\n  'mantequilla': 'butter',\n  'tostada': 'toast'\n};\nexport const dmMachine = {\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        CLICK: 'init'\n      }\n    },\n    init: {\n      on: {\n        TTS_READY: 'welcome',\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          target: 'helpWord',\n          cond: context => context.recResultL2[0].utterance.includes(\"how do you say\")\n        }],\n        TIMEOUT: '..'\n      },\n      states: {\n        prompt: {\n          entry: say(\"What did you have for breakfast this morning?\"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: send('LISTEN')\n        }\n      }\n    },\n    helpWord: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: esDict[context.recResultL2[0].utterance.split(\" \")[context.recResultL2[0].utterance.split(\" \").length - 1].replace(/[?!]/, \"\")]\n          })),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: send('LISTEN')\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/andrea/Desktop/breakfast_demo/src/dmBreakfast.ts"],"names":["send","say","text","_context","type","value","esDict","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","welcome","RECOGNISED","target","cond","context","recResultL2","utterance","includes","TIMEOUT","prompt","entry","ENDSPEECH","ask","helpWord","split","length","replace"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAAwBA,IAAxB,QAA4C,QAA5C;;AAGA,SAASC,GAAT,CAAaC,IAAb,EAAyD;AACrD,SAAOF,IAAI,CAAEG,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEH;AAAxB,GAA3B,CAAD,CAAX;AACH;;AAGD,MAAMI,MAAmC,GAAG;AACxC,eAAa,KAD2B;AAExC,iBAAe,QAFyB;AAGxC,aAAW;AAH6B,CAA5C;AAOA,OAAO,MAAMC,SAAmD,GAAI;AAChEC,EAAAA,OAAO,EAAE,MADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE;AACFC,MAAAA,EAAE,EAAE;AACAC,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMJC,IAAAA,IAAI,EAAE;AACFF,MAAAA,EAAE,EAAE;AACAG,QAAAA,SAAS,EAAE,SADX;AAEAF,QAAAA,KAAK,EAAE;AAFP;AADF,KANF;AAYJG,IAAAA,OAAO,EAAE;AACLP,MAAAA,OAAO,EAAE,QADJ;AAELG,MAAAA,EAAE,EAAE;AACAK,QAAAA,UAAU,EAAE,CACR;AAAEC,UAAAA,MAAM,EAAE,UAAV;AAAsBC,UAAAA,IAAI,EAAGC,OAAD,IAAaA,OAAO,CAACC,WAAR,CAAoB,CAApB,EAAuBC,SAAvB,CAAiCC,QAAjC,CAA0C,gBAA1C;AAAzC,SADQ,CADZ;AAGAC,QAAAA,OAAO,EAAE;AAHT,OAFC;AAOLd,MAAAA,MAAM,EAAE;AACJe,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAExB,GAAG,CAAC,+CAAD,CADN;AAEJU,UAAAA,EAAE,EAAE;AAAEe,YAAAA,SAAS,EAAE;AAAb;AAFA,SADJ;AAKJC,QAAAA,GAAG,EAAE;AACDF,UAAAA,KAAK,EAAEzB,IAAI,CAAC,QAAD;AADV;AALD;AAPH,KAZL;AA6BJ4B,IAAAA,QAAQ,EAAE;AACNpB,MAAAA,OAAO,EAAE,QADH;AAENC,MAAAA,MAAM,EAAE;AACJe,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEzB,IAAI,CAAEmB,OAAD,KAA0B;AAClCf,YAAAA,IAAI,EAAE,OAD4B;AAElCC,YAAAA,KAAK,EAAEC,MAAM,CAACa,OAAO,CAACC,WAAR,CAAoB,CAApB,EAAuBC,SAAvB,CAAiCQ,KAAjC,CAAuC,GAAvC,EAA4CV,OAAO,CAACC,WAAR,CAAoB,CAApB,EAAuBC,SAAvB,CAAiCQ,KAAjC,CAAuC,GAAvC,EAA4CC,MAA5C,GAAqD,CAAjG,EAAoGC,OAApG,CAA4G,MAA5G,EAAoH,EAApH,CAAD;AAFqB,WAA1B,CAAD,CADP;AAKJpB,UAAAA,EAAE,EAAE;AAAEe,YAAAA,SAAS,EAAE;AAAb;AALA,SADJ;AAQJC,QAAAA,GAAG,EAAE;AACDF,UAAAA,KAAK,EAAEzB,IAAI,CAAC,QAAD;AADV;AARD;AAFF;AA7BN;AAFwD,CAA7D","sourcesContent":["/*\nEXAMPLE: SearchL2 + ProvL1 + AskL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nCODE-SWITCHING BUTTON (L2 → L1)\nS> Mermelada (<trans: jam>)\nS> ¿Cómo se dice? (<trans: how do you say it?)\nCODE-SWITCHING BUTTON (L1 → L2)??\nT> Jam\nS> Jam\nT> Mhm\n\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nT> \n*/\n\n\nimport { MachineConfig, send, Action } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\n\nconst esDict: { [index: string]: string } = {\n    'mermelada': 'jam',\n    'mantequilla': 'butter',\n    'tostada': 'toast'\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'welcome',\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    { target: 'helpWord', cond: (context) => context.recResultL2[0].utterance.includes(\"how do you say\") }],\n                TIMEOUT: '..',\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What did you have for breakfast this morning?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                }\n            }\n        },\n        helpWord: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: send((context: SDSContext) => ({\n                        type: \"SPEAK\",\n                        value: esDict[context.recResultL2[0].utterance.split(\" \")[context.recResultL2[0].utterance.split(\" \").length - 1].replace(/[?!]/, \"\")]\n                    })),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                },\n            }\n        }\n    }\n})"]},"metadata":{},"sourceType":"module"}