{"ast":null,"code":"/*\n(convered)\nEXAMPLE: SearchL2 + AskL1 + ProvL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nS> ¿Cómo se dice 'mermelada'? (<trans: how do you say jam?)\nT> Jam\nS> Jam\n(it repeats until S pronounces the word 'jam' correctly)\nT> Uh-huh\n\n\n\n\n(not convered so far)\nEXAMPLE: SearchL2 + ProvL1 + AskL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nS> Mermelada (<trans: jam>)\nS> ¿Cómo se dice? (<trans: how do you say it?)\nT> Jam\nS> Jam\nT> Jam\n\n\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nT> \n*/\nimport { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nconst esDict = {\n  'mermelada': 'jam.',\n  'mantequilla': 'butter.',\n  'tostada': 'toast.',\n  'cereales': 'cereals.',\n  'leche': 'milk.',\n  'café': 'coffee.',\n  'zumo': 'juice.',\n  'queso': 'cheese.'\n};\nlet askL1 = [\"cómo se dice\", \"cómo es\"]; //indask --> no sé cómo se dice\n\nexport const dmMachine = {\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        CLICK: 'init'\n      }\n    },\n    init: {\n      on: {\n        TTS_READY: 'welcome',\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [//{ target: 'helpWord', cond: (context) => context.recResultL2[0].utterance.toLowerCase().includes(\"cómo se dice\") },\n        {\n          target: 'helpWord',\n          cond: askL1.map(x => askL1.recResultL2[0].utterance.toLowerCase().includes(x)).reduce((a, b) => a || b)\n        }, {\n          target: 'unrelated'\n        }],\n        TIMEOUT: '..'\n      },\n      states: {\n        prompt: {\n          entry: say(\"What did you have for breakfast this morning?\"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: send('LISTEN')\n        }\n      }\n    },\n    helpWord: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: [assign((context, event) => {\n            return {\n              unknownWord: esDict[context.recResultL2[0].utterance.split(\" \")[context.recResultL2[0].utterance.split(\" \").length - 1].replace(/[?!]/, \"\")]\n            };\n          }), send(context => ({\n            type: \"SPEAK\",\n            value: context.unknownWord\n          }))],\n          on: {\n            ENDSPEECH: 'test'\n          }\n        },\n        test: {\n          entry: send('LISTEN'),\n          on: {\n            RECOGNISED: [{\n              target: 'ack',\n              cond: context => context.unknownWord === context.recResult[0].utterance.toLowerCase()\n            }, {\n              target: 'provL2'\n            }]\n          }\n        },\n        ack: {\n          entry: say(\"Uh-huh\"),\n          on: {\n            ENDSPEECH: '#root.dm.welcome'\n          }\n        },\n        provL2: {\n          entry: [send(context => ({\n            type: \"SPEAK\",\n            value: context.unknownWord\n          }))],\n          on: {\n            ENDSPEECH: 'test'\n          }\n        }\n      }\n    },\n    unrelated: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: say(\"Yummy!\"),\n          on: {\n            ENDSPEECH: 'unrelated'\n          }\n        },\n        unrelated: {\n          always: '#root.dm.welcome'\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/andrea/Desktop/breakfast_demo/src/dmBreakfast.ts"],"names":["send","assign","say","text","_context","type","value","esDict","askL1","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","welcome","RECOGNISED","target","cond","map","x","recResultL2","utterance","toLowerCase","includes","reduce","a","b","TIMEOUT","prompt","entry","ENDSPEECH","ask","helpWord","context","event","unknownWord","split","length","replace","test","recResult","ack","provL2","unrelated","always"],"mappings":"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","sourcesContent":["/*\n(convered)\nEXAMPLE: SearchL2 + AskL1 + ProvL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nS> ¿Cómo se dice 'mermelada'? (<trans: how do you say jam?)\nT> Jam\nS> Jam\n(it repeats until S pronounces the word 'jam' correctly)\nT> Uh-huh\n\n\n\n\n(not convered so far)\nEXAMPLE: SearchL2 + ProvL1 + AskL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nS> Mermelada (<trans: jam>)\nS> ¿Cómo se dice? (<trans: how do you say it?)\nT> Jam\nS> Jam\nT> Jam\n\n\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nT> \n*/\n\n\nimport { MachineConfig, send, assign, Action } from \"xstate\";\n\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\n\nconst esDict: { [index: string]: string } = {\n    'mermelada': 'jam.',\n    'mantequilla': 'butter.',\n    'tostada': 'toast.',\n    'cereales': 'cereals.',\n    'leche': 'milk.',\n    'café': 'coffee.',\n    'zumo': 'juice.',\n    'queso': 'cheese.'\n\n}\n\n\nlet askL1 = [\"cómo se dice\",\"cómo es\"]\n//indask --> no sé cómo se dice\n\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'welcome',\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    //{ target: 'helpWord', cond: (context) => context.recResultL2[0].utterance.toLowerCase().includes(\"cómo se dice\") },\n                    { target: 'helpWord', cond: askL1.map((x) => askL1.recResultL2[0].utterance.toLowerCase().includes(x)).reduce((a,b) => a||b) },\n                    { target: 'unrelated' }],\n                TIMEOUT: '..',\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What did you have for breakfast this morning?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                }\n            }\n        },\n        helpWord: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: [\n                        assign((context, event) => { return { unknownWord: esDict[context.recResultL2[0].utterance.split(\" \")[context.recResultL2[0].utterance.split(\" \").length - 1].replace(/[?!]/, \"\")] } }),\n                        send((context: SDSContext) => ({\n                        type: \"SPEAK\",\n                        value: context.unknownWord\n                    }))],\n                    on: { ENDSPEECH: 'test' }\n                },\n                test: {\n                    entry: send('LISTEN'),\n                    on: { RECOGNISED: \n                        [\n                        {target: 'ack', cond: (context) => context.unknownWord === context.recResult[0].utterance.toLowerCase()},\n                        {target: 'provL2'}\n                    ] \n                }\n                },\n                ack: {\n                    entry: say(\"Uh-huh\"),\n                    on: { ENDSPEECH: '#root.dm.welcome' }\n                },\n                provL2: {\n                    entry: [\n                        send((context: SDSContext) => ({\n                        type: \"SPEAK\",\n                        value: context.unknownWord\n                    }))],\n                    on: { ENDSPEECH: 'test' }\n                }\n\n            }\n        },\n        unrelated: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: say(\"Yummy!\"),\n                    on: { ENDSPEECH: 'unrelated' }\n                },\n                unrelated: {\n                    always: '#root.dm.welcome'\n                }\n            }\n        }\n    }\n})\n\n"]},"metadata":{},"sourceType":"module"}