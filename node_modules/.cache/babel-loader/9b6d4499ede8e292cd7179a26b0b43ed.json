{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SynthesisTurn = void 0;\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar AudioOutputStream_1 = require(\"../sdk/Audio/AudioOutputStream\");\n\nvar SynthesisAdapterBase_1 = require(\"./SynthesisAdapterBase\");\n\nvar SynthesisEvents_1 = require(\"./SynthesisEvents\");\n\nvar SynthesisTurn = function () {\n  function SynthesisTurn() {\n    var _this = this;\n\n    this.privIsDisposed = false;\n    this.privIsSynthesizing = false;\n    this.privIsSynthesisEnded = false;\n    this.privBytesReceived = 0;\n    this.privInTurn = false;\n    this.privTextOffset = 0;\n    this.privNextSearchTextIndex = 0;\n\n    this.onPreConnectionStart = function (authFetchEventId, connectionId) {\n      _this.privAuthFetchEventId = authFetchEventId;\n\n      _this.onEvent(new SynthesisEvents_1.ConnectingToSynthesisServiceEvent(_this.privRequestId, _this.privAuthFetchEventId));\n    };\n\n    this.onAuthCompleted = function (isError, error) {\n      if (isError) {\n        _this.onComplete();\n      }\n    };\n\n    this.onConnectionEstablishCompleted = function (statusCode, reason) {\n      if (statusCode === 200) {\n        _this.onEvent(new SynthesisEvents_1.SynthesisStartedEvent(_this.requestId, _this.privAuthFetchEventId));\n\n        _this.privBytesReceived = 0;\n        return;\n      } else if (statusCode === 403) {\n        _this.onComplete();\n      }\n    };\n\n    this.onServiceResponseMessage = function (responseJson) {\n      var response = JSON.parse(responseJson);\n      _this.streamId = response.audio.streamId;\n    };\n\n    this.onServiceTurnEndResponse = function () {\n      _this.privInTurn = false;\n\n      _this.privTurnDeferral.resolve();\n\n      _this.onComplete();\n    };\n\n    this.onServiceTurnStartResponse = function () {\n      if (!!_this.privTurnDeferral && !!_this.privInTurn) {\n        // What? How are we starting a turn with another not done?\n        _this.privTurnDeferral.reject(\"Another turn started before current completed.\"); // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\n\n        /* tslint:disable:no-empty */\n\n\n        _this.privTurnDeferral.promise.then().catch(function () {});\n      }\n\n      _this.privInTurn = true;\n      _this.privTurnDeferral = new Exports_1.Deferred();\n    };\n\n    this.dispose = function (error) {\n      if (!_this.privIsDisposed) {\n        // we should have completed by now. If we did not its an unknown error.\n        _this.privIsDisposed = true;\n      }\n    };\n\n    this.onEvent = function (event) {\n      Exports_1.Events.instance.onEvent(event);\n    };\n\n    this.onComplete = function () {\n      if (_this.privIsSynthesizing) {\n        _this.privIsSynthesizing = false;\n        _this.privIsSynthesisEnded = true;\n\n        _this.privAudioOutputStream.close();\n\n        _this.privInTurn = false;\n\n        if (_this.privTurnAudioDestination !== undefined) {\n          _this.privTurnAudioDestination.close();\n\n          _this.privTurnAudioDestination = undefined;\n        }\n      }\n    };\n\n    this.privRequestId = Exports_1.createNoDashGuid();\n    this.privTurnDeferral = new Exports_1.Deferred(); // We're not in a turn, so resolve.\n\n    this.privTurnDeferral.resolve();\n  }\n\n  Object.defineProperty(SynthesisTurn.prototype, \"requestId\", {\n    get: function () {\n      return this.privRequestId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisTurn.prototype, \"streamId\", {\n    get: function () {\n      return this.privStreamId;\n    },\n    set: function (value) {\n      this.privStreamId = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisTurn.prototype, \"audioOutputFormat\", {\n    get: function () {\n      return this.privAudioOutputFormat;\n    },\n    set: function (format) {\n      this.privAudioOutputFormat = format;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisTurn.prototype, \"turnCompletionPromise\", {\n    get: function () {\n      return this.privTurnDeferral.promise;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisTurn.prototype, \"isSynthesisEnded\", {\n    get: function () {\n      return this.privIsSynthesisEnded;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisTurn.prototype, \"isSynthesizing\", {\n    get: function () {\n      return this.privIsSynthesizing;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisTurn.prototype, \"currentTextOffset\", {\n    get: function () {\n      return this.privTextOffset;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisTurn.prototype, \"bytesReceived\", {\n    // The number of bytes received for current turn\n    get: function () {\n      return this.privBytesReceived;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SynthesisTurn.prototype.getAllReceivedAudio = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.privReceivedAudio) {\n              return [2\n              /*return*/\n              , Promise.resolve(this.privReceivedAudio)];\n            }\n\n            if (!this.privIsSynthesisEnded) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , this.readAllAudioFromStream()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , Promise.resolve(this.privReceivedAudio)];\n        }\n      });\n    });\n  };\n\n  SynthesisTurn.prototype.getAllReceivedAudioWithHeader = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var audio;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.privReceivedAudioWithHeader) {\n              return [2\n              /*return*/\n              , this.privReceivedAudioWithHeader];\n            }\n\n            if (!this.privIsSynthesisEnded) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            if (!this.audioOutputFormat.hasHeader) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.getAllReceivedAudio()];\n\n          case 1:\n            audio = _a.sent();\n            this.privReceivedAudioWithHeader = SynthesisAdapterBase_1.SynthesisAdapterBase.addHeader(audio, this.audioOutputFormat);\n            return [2\n            /*return*/\n            , this.privReceivedAudioWithHeader];\n\n          case 2:\n            return [2\n            /*return*/\n            , this.getAllReceivedAudio()];\n        }\n      });\n    });\n  };\n\n  SynthesisTurn.prototype.startNewSynthesis = function (requestId, rawText, isSSML, audioDestination) {\n    this.privIsSynthesisEnded = false;\n    this.privIsSynthesizing = true;\n    this.privRequestId = requestId;\n    this.privRawText = rawText;\n    this.privIsSSML = isSSML;\n    this.privAudioOutputStream = new AudioOutputStream_1.PullAudioOutputStreamImpl();\n    this.privAudioOutputStream.format = this.privAudioOutputFormat;\n    this.privReceivedAudio = null;\n    this.privReceivedAudioWithHeader = null;\n    this.privBytesReceived = 0;\n    this.privTextOffset = 0;\n    this.privNextSearchTextIndex = 0;\n    this.privPartialVisemeAnimation = \"\";\n\n    if (audioDestination !== undefined) {\n      this.privTurnAudioDestination = audioDestination;\n      this.privTurnAudioDestination.format = this.privAudioOutputFormat;\n    }\n\n    this.onEvent(new SynthesisEvents_1.SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\n  };\n\n  SynthesisTurn.prototype.onAudioChunkReceived = function (data) {\n    if (this.isSynthesizing) {\n      this.privAudioOutputStream.write(data);\n      this.privBytesReceived += data.byteLength;\n\n      if (this.privTurnAudioDestination !== undefined) {\n        this.privTurnAudioDestination.write(data);\n      }\n    }\n  };\n\n  SynthesisTurn.prototype.onWordBoundaryEvent = function (text) {\n    this.updateTextOffset(text);\n  };\n\n  SynthesisTurn.prototype.onVisemeMetadataReceived = function (metadata) {\n    if (metadata.Data.AnimationChunk !== undefined) {\n      this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\n    }\n  };\n\n  SynthesisTurn.prototype.onStopSynthesizing = function () {\n    this.onComplete();\n  };\n  /**\n   * Gets the viseme animation string (merged from animation chunk), and clears the internal\n   * partial animation.\n   */\n\n\n  SynthesisTurn.prototype.getAndClearVisemeAnimation = function () {\n    var animation = this.privPartialVisemeAnimation;\n    this.privPartialVisemeAnimation = \"\";\n    return animation;\n  };\n\n  SynthesisTurn.prototype.updateTextOffset = function (text) {\n    if (this.privTextOffset >= 0) {\n      this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\n\n      if (this.privTextOffset >= 0) {\n        this.privNextSearchTextIndex = this.privTextOffset + text.length;\n      }\n\n      if (this.privIsSSML) {\n        if (this.privRawText.indexOf(\"<\", this.privTextOffset + 1) > this.privRawText.indexOf(\">\", this.privTextOffset + 1)) {\n          this.updateTextOffset(text);\n        }\n      }\n    }\n  };\n\n  SynthesisTurn.prototype.readAllAudioFromStream = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.privIsSynthesisEnded) return [3\n            /*break*/\n            , 4];\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.privAudioOutputStream.read(this.privReceivedAudio)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n            this.privReceivedAudio = new ArrayBuffer(0);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return SynthesisTurn;\n}();\n\nexports.SynthesisTurn = SynthesisTurn;","map":{"version":3,"sources":["src/common.speech/SynthesisTurn.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events, IAudioDestination\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { ISynthesisMetadata } from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nimport { SynthesisAdapterBase } from \"./SynthesisAdapterBase\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n\r\n    constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = SynthesisAdapterBase.addHeader(audio, this.audioOutputFormat);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage = (responseJson: string): void => {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson);\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse = (): void => {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse = (): void => {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            /* tslint:disable:no-empty */\r\n            this.privTurnDeferral.promise.then().catch(() => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onWordBoundaryEvent(text: string): void {\r\n        this.updateTextOffset(text);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public dispose = (error?: string): void => {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent = (event: SpeechSynthesisEvent): void => {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private updateTextOffset(text: string): void {\r\n        if (this.privTextOffset >= 0) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n            }\r\n            if (this.privIsSSML) {\r\n                if (this.privRawText.indexOf(\"<\", this.privTextOffset + 1) > this.privRawText.indexOf(\">\", this.privTextOffset + 1)) {\r\n                    this.updateTextOffset(text);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete = (): void => {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}