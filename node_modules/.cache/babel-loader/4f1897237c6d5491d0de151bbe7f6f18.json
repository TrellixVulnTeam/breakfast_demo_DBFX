{"ast":null,"code":"var _jsxFileName = \"/home/andrea/Desktop/breakfast_demo/src/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmBreakfast\";\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText';\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  send,\n  cancel\n} = actions;\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nconst defaultPassivity = 3;\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    dm: { ...dmMachine\n    },\n    asrtts: {\n      initial: 'init',\n      states: {\n        init: {\n          on: {\n            CLICK: {\n              target: 'getToken',\n              actions: [assign({\n                audioCtx: _ctx => new (window.AudioContext || window.webkitAudioContext)()\n              }), context => navigator.mediaDevices.getUserMedia({\n                audio: true\n              }).then(function (stream) {\n                context.audioCtx.createMediaStreamSource(stream);\n              })]\n            }\n          }\n        },\n        getToken: {\n          invoke: {\n            id: \"getAuthorizationToken\",\n            src: (_ctx, _evt) => getAuthorizationToken(),\n            onDone: {\n              actions: [assign((_context, event) => {\n                return {\n                  azureAuthorizationToken: event.data\n                };\n              }), 'ponyfillASR'],\n              target: 'ponyfillTTS'\n            },\n            onError: {\n              target: 'fail'\n            }\n          }\n        },\n        ponyfillTTS: {\n          invoke: {\n            id: 'ponyTTS',\n            src: (context, _event) => (callback, _onReceive) => {\n              const ponyfill = createSpeechSynthesisPonyfill({\n                audioContext: context.audioCtx,\n                credentials: {\n                  region: REGION,\n                  authorizationToken: context.azureAuthorizationToken\n                }\n              });\n              const {\n                speechSynthesis,\n                SpeechSynthesisUtterance\n              } = ponyfill;\n              context.tts = speechSynthesis;\n              context.ttsUtterance = SpeechSynthesisUtterance;\n              context.tts.addEventListener('voiceschanged', () => {\n                context.tts.cancel();\n                const voices = context.tts.getVoices();\n                let voiceRe = RegExp(\"en-US\", 'u');\n\n                if (process.env.REACT_APP_TTS_VOICE) {\n                  voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u');\n                }\n\n                const voice = voices.find(v => voiceRe.test(v.name));\n\n                if (voice) {\n                  context.voice = voice;\n                  callback('TTS_READY');\n                } else {\n                  console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`);\n                  callback('TTS_ERROR');\n                }\n              });\n            }\n          },\n          on: {\n            TTS_READY: 'idle',\n            TTS_ERROR: 'fail'\n          }\n        },\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        recognising: {\n          initial: 'noinput',\n          on: {\n            RECOGNISED: 'idle',\n            SELECT: 'idle',\n            CLICK: '.pause'\n          },\n          states: {\n            noinput: {\n              entry: ['recStart', send({\n                type: 'TIMEOUT'\n              }, {\n                delay: context => 1000 * (context.tdmPassivity || defaultPassivity),\n                id: 'timeout'\n              })],\n              on: {\n                TIMEOUT: '#root.asrtts.idle',\n                STARTSPEECH: 'inprogress'\n              },\n              exit: cancel('timeout')\n            },\n            inprogress: {\n              on: {\n                ASRRESULT: {\n                  actions: ['recLogResult', assign((_context, event) => {\n                    return {\n                      recResult: event.value\n                    };\n                  })],\n                  target: 'match'\n                },\n                ASRRESULT_L2: {\n                  actions: ['recLogResultL2', assign((_context, event) => {\n                    return {\n                      recResultL2: event.value\n                    };\n                  })],\n                  target: 'match'\n                }\n              }\n            },\n            match: {\n              on: {\n                ASRRESULT: {\n                  actions: ['recLogResult', assign((_context, event) => {\n                    return {\n                      recResult: event.value\n                    };\n                  })],\n                  target: 'matchmatch'\n                },\n                ASRRESULT_L2: {\n                  actions: ['recLogResultL2', assign((_context, event) => {\n                    return {\n                      recResultL2: event.value\n                    };\n                  })],\n                  target: 'matchmatch'\n                }\n              },\n              exit: 'recStop'\n            },\n            matchmatch: {\n              entry: send('RECOGNISED')\n            },\n            pause: {\n              entry: 'recStop',\n              on: {\n                CLICK: 'noinput'\n              }\n            }\n          }\n        },\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle',\n            SELECT: 'idle',\n            CLICK: {\n              target: 'idle',\n              actions: send('ENDSPEECH')\n            }\n          },\n          exit: 'ttsStop'\n        },\n        fail: {}\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n    },\n    recLogResultL2: context => {\n      /* context.recResult = event.recResult; */\n      console.log('U>', context.recResultL2[0][\"utterance\"], context.recResultL2[0][\"confidence\"]);\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  var promptText = ((props.state.context.tdmVisualOutputInfo || [{}]).find(el => el.attribute === \"name\") || {}).value;\n  var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}]).find(el => el.attribute === \"image\") || {}).value;\n  var circleClass = \"circle\";\n\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'fail'\n    }) || props.state.matches({\n      dm: 'fail'\n    }):\n      break;\n\n    case props.state.matches({\n      asrtts: {\n        recognising: 'pause'\n      }\n    }):\n      promptText = \"Click to continue\";\n      break;\n\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      circleClass = \"circle-recognising\";\n      promptText = promptText || 'Listening...';\n      break;\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      circleClass = \"circle-speaking\";\n      promptText = promptText || 'Speaking...';\n      break;\n\n    case props.state.matches({\n      dm: 'idle'\n    }):\n      promptText = \"Click to start!\";\n      circleClass = \"circle-click\";\n      break;\n\n    case props.state.matches({\n      dm: 'init'\n    }):\n      promptText = \"Click to start!\";\n      circleClass = \"circle-click\";\n      break;\n\n    default:\n      promptText = promptText || '\\u00A0';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"control\",\n    children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n      className: \"prompt\",\n      children: promptImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: promptImage,\n        alt: promptText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: circleClass,\n        style: {},\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-text\",\n        children: promptText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ReactiveButton;\n\nconst FigureButton = props => {\n  const caption = props.alternative.find(el => el.attribute === \"name\").value;\n  const imageSrc = (props.alternative.find(el => el.attribute === \"image\") || {}).value;\n  return /*#__PURE__*/_jsxDEV(\"figure\", {\n    className: \"flex\",\n    ...props,\n    children: [imageSrc && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageSrc,\n      alt: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"figcaption\", {\n      children: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = FigureButton;\n\nfunction App() {\n  _s();\n\n  const [current, send] = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(context => {\n        context.asr.start();\n        context.asrL2.start();\n        /* console.log('Ready to receive a voice input.'); */\n      }),\n      recStop: asEffect(context => {\n        context.asr.abort();\n        context.asrL2.abort();\n        /* console.log('Recognition stopped.'); */\n      }),\n      ttsStart: asEffect(context => {\n        let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"es-ES\"><voice name=\"${context.voice.name}\">`;\n        content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\");\n        content = content + `${context.ttsAgenda}</voice></speak>`;\n        console.debug(content);\n        const utterance = new context.ttsUtterance(content);\n        console.log(\"S>\", context.ttsAgenda, content);\n        utterance.voice = context.voice;\n\n        utterance.onend = () => send('ENDSPEECH');\n\n        context.tts.speak(utterance);\n      }),\n      ttsStop: asEffect(context => {\n        /* console.log('TTS STOP...'); */\n        context.tts.cancel();\n      }),\n      ponyfillASR: asEffect((context, _event) => {\n        const {\n          SpeechRecognition\n        } = createSpeechRecognitionPonyfill({\n          audioContext: context.audioCtx,\n          credentials: {\n            region: REGION,\n            authorizationToken: context.azureAuthorizationToken\n          }\n        });\n        context.asr = new SpeechRecognition();\n        context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US';\n        context.asr.continuous = true;\n        context.asr.interimResults = true;\n\n        context.asr.onresult = function (event) {\n          var result = event.results[0];\n\n          if (result.isFinal) {\n            send({\n              type: \"ASRRESULT\",\n              value: [{\n                \"utterance\": result[0].transcript,\n                \"confidence\": result[0].confidence\n              }]\n            });\n          } else {\n            send({\n              type: \"STARTSPEECH\"\n            });\n          }\n        };\n\n        context.asrL2 = new SpeechRecognition();\n        context.asrL2.lang = 'es-ES';\n        context.asrL2.continuous = true;\n        context.asrL2.interimResults = true;\n\n        context.asrL2.onresult = function (event) {\n          var result = event.results[0];\n\n          if (result.isFinal) {\n            send({\n              type: \"ASRRESULT_L2\",\n              value: [{\n                \"utterance\": result[0].transcript,\n                \"confidence\": result[0].confidence\n              }]\n            });\n          } else {\n            send({\n              type: \"STARTSPEECH\"\n            });\n          }\n        };\n      })\n    }\n  });\n  const figureButtons = (current.context.tdmExpectedAlternatives || []).filter(o => o.visual_information).map((o, i) => /*#__PURE__*/_jsxDEV(FigureButton, {\n    state: current,\n    alternative: o.visual_information,\n    onClick: () => send({\n      type: 'SELECT',\n      value: o.semantic_expression\n    })\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 17\n  }, this));\n\n  switch (true) {\n    default:\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(ReactiveButton, {\n          state: current,\n          alternative: {},\n          onClick: () => send('CLICK')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"select\",\n            children: figureButtons\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }, this);\n  }\n}\n\n_s(App, \"hivFDqy8aBXkc2TxKDfXx/cZtwE=\", false, function () {\n  return [useMachine];\n});\n\n_c3 = App;\n;\n\nconst getAuthorizationToken = () => fetch(new Request(TOKEN_ENDPOINT, {\n  method: 'POST',\n  headers: {\n    'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY\n  }\n})).then(data => data.text());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 403,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ReactiveButton\");\n$RefreshReg$(_c2, \"FigureButton\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/andrea/Desktop/breakfast_demo/src/index.tsx"],"names":["React","ReactDOM","Machine","assign","actions","useMachine","asEffect","inspect","dmMachine","createSpeechRecognitionPonyfill","createSpeechSynthesisPonyfill","send","cancel","TOKEN_ENDPOINT","REGION","url","iframe","defaultPassivity","machine","id","type","states","dm","asrtts","initial","init","on","CLICK","target","audioCtx","_ctx","window","AudioContext","webkitAudioContext","context","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","getToken","invoke","src","_evt","getAuthorizationToken","onDone","_context","event","azureAuthorizationToken","data","onError","ponyfillTTS","_event","callback","_onReceive","ponyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","env","REACT_APP_TTS_VOICE","voice","find","v","test","name","console","error","TTS_READY","TTS_ERROR","idle","LISTEN","SPEAK","ttsAgenda","value","recognising","RECOGNISED","SELECT","noinput","entry","delay","tdmPassivity","TIMEOUT","STARTSPEECH","exit","inprogress","ASRRESULT","recResult","ASRRESULT_L2","recResultL2","match","matchmatch","pause","speaking","ENDSPEECH","fail","recLogResult","log","recLogResultL2","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","FigureButton","caption","alternative","imageSrc","App","current","devTools","recStart","asr","start","asrL2","recStop","abort","ttsStart","content","REACT_APP_TTS_LEXICON","debug","utterance","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","lang","REACT_APP_ASR_LANGUAGE","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","semantic_expression","fetch","Request","method","headers","REACT_APP_SUBSCRIPTION_KEY","text","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmBreakfast\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 3\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    on: {\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                            on: {\n                                ASRRESULT: {\n                                    actions: ['recLogResult',\n                                        assign((_context, event) => {\n                                            return {\n                                                recResult: event.value\n                                            }\n                                        })],\n                                    target: 'match'\n                                },\n                                ASRRESULT_L2: {\n                                    actions: ['recLogResultL2',\n                                        assign((_context, event) => {\n                                            return {\n                                                recResultL2: event.value\n                                            }\n                                        })],\n                                    target: 'match'\n                                },\n                            }\n                        },\n                        match: {\n                            on: {\n                                ASRRESULT: {\n                                    actions: ['recLogResult',\n                                        assign((_context, event) => {\n                                            return {\n                                                recResult: event.value\n                                            }\n                                        })],\n                                    target: 'matchmatch'\n                                },\n                                ASRRESULT_L2: {\n                                    actions: ['recLogResultL2',\n                                        assign((_context, event) => {\n                                            return {\n                                                recResultL2: event.value\n                                            }\n                                        })],\n                                    target: 'matchmatch'\n                                },\n\n                            },\n                            exit: 'recStop',\n                        },\n                        matchmatch: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            recLogResultL2: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResultL2[0][\"utterance\"], context.recResultL2[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect((context) => {\n                context.asr.start()\n                context.asrL2.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                context.asrL2.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"es-ES\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(content);\n                console.log(\"S>\", context.ttsAgenda, content)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n                context.asrL2 = new SpeechRecognition()\n                context.asrL2.lang = 'es-ES'\n                context.asrL2.continuous = true\n                context.asrL2.interimResults = true\n                context.asrL2.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT_L2\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"]},"metadata":{},"sourceType":"module"}