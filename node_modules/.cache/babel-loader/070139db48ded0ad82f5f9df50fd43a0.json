{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranscriberConnectionFactory = void 0;\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar ConnectionFactoryBase_1 = require(\"./ConnectionFactoryBase\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar HeaderNames_1 = require(\"./HeaderNames\");\n\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\n\nvar TranscriberConnectionFactory = function (_super) {\n  __extends(TranscriberConnectionFactory, _super);\n\n  function TranscriberConnectionFactory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.multiaudioRelativeUri = \"/speech/recognition/multiaudio\";\n\n    _this.create = function (config, authInfo, connectionId) {\n      var endpoint = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, undefined);\n      var region = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, \"centralus\");\n      var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n      var hostDefault = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + _this.multiaudioRelativeUri;\n      var host = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Host, hostDefault);\n      var queryParams = {};\n      var endpointId = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId, undefined);\n      var language = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n      if (endpointId) {\n        if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n          queryParams[QueryParameterNames_1.QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n        }\n      } else if (language) {\n        if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.Language) === -1) {\n          queryParams[QueryParameterNames_1.QueryParameterNames.Language] = language;\n        }\n      }\n\n      _this.setCommonUrlParams(config, queryParams, endpoint);\n\n      if (!endpoint) {\n        endpoint = host;\n      }\n\n      var headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[HeaderNames_1.HeaderNames.ConnectionId] = connectionId;\n      config.parameters.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Url, endpoint);\n      var enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_3.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n\n    return _this;\n  }\n\n  return TranscriberConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase);\n\nexports.TranscriberConnectionFactory = TranscriberConnectionFactory;","map":{"version":3,"sources":["src/common.speech/TranscriberConnectionFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string =  (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}