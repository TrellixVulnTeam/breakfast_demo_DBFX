{"ast":null,"code":"/*\n(convered)\nEXAMPLE: SearchL2 + AskL1 + ProvL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nS> ¿Cómo se dice 'mermelada'? (<trans: how do you say 'jam'?)\nT> Jam\nS> Jam\n(it repeats until S pronounces the word 'jam' correctly)\nT> Uh-huh\nT> Did you have anything else?\n\n1.\nS> Yes, I had a juice too\nT> Yummy!\nT> Did you... (repeats until negative answer)\nT> Ok, good breakfast!\nSTOP --> init\n\n2.\nS> No.\nT> Ok, good breakfast!\nSTOP --> init\n\n------------------------------------\n\n(not convered so far)\nEXAMPLE: SearchL2 + ProvL1 + AskL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nS> Mermelada (<trans: jam>)\nS> ¿Cómo se dice? (<trans: how do you say it?)\nT> Jam\nS> Jam\nT> Jam\n\n\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nT> \n*/\n// maybe we can have helpword_1 for como se dice and helpword_2 for any other way of asking??\nimport { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nconst esDict = {\n  'mermelada': 'jam.',\n  'mantequilla': 'butter.',\n  'tostada': 'toast.',\n  'cereales': 'cereals.',\n  'leche': 'milk.',\n  'café': 'coffee.',\n  'zumo': 'juice.',\n  'queso': 'cheese.',\n  'tortitas': 'pancakes.',\n  'jamón': 'ham.',\n  'yogur': 'yogurt.',\n  'aceite': 'olive oil',\n  'fruta': 'fruit.',\n  'tomate': 'tomato.'\n};\nlet askL1 = [\"cómo se dice\", \"cómo es\"]; //indask --> no sé cómo se dice\n\nexport const dmMachine = {\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        CLICK: 'init'\n      }\n    },\n    init: {\n      on: {\n        TTS_READY: 'welcome',\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          target: 'helpWord',\n          cond: context => context.recResultL2[0].utterance.toLowerCase().includes(\"cómo se dice\")\n        }, //{ target: 'helpWord', cond: (context) => askL1.map((x) => context.recResultL2[0].utterance.toLowerCase().includes(x)).reduce((a,b) => a||b) },\n        {\n          target: 'unrelated'\n        }],\n        TIMEOUT: '..'\n      },\n      states: {\n        prompt: {\n          entry: say(\"What did you have for breakfast this morning?\"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: send('LISTEN')\n        }\n      }\n    },\n    helpWord: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: [assign((context, event) => {\n            return {\n              unknownWord: esDict[context.recResultL2[0].utterance.split(\" \")[context.recResultL2[0].utterance.split(\" \").length - 1].replace(/[?!]/, \"\")]\n            };\n          }), send(context => ({\n            type: \"SPEAK\",\n            value: context.unknownWord\n          }))],\n          on: {\n            ENDSPEECH: 'test'\n          }\n        },\n        test: {\n          entry: send('LISTEN'),\n          on: {\n            RECOGNISED: [{\n              target: 'ack',\n              cond: context => context.unknownWord === context.recResult[0].utterance.toLowerCase()\n            }, {\n              target: 'provL2'\n            }]\n          }\n        },\n        ack: {\n          entry: say(\"Uh-huh\"),\n          on: {\n            ENDSPEECH: '#root.dm.secondQuestion'\n          }\n        },\n        provL2: {\n          entry: [send(context => ({\n            type: \"SPEAK\",\n            value: context.unknownWord\n          }))],\n          on: {\n            ENDSPEECH: 'test'\n          }\n        }\n      }\n    },\n    unrelated: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: say(\"Yummy!\"),\n          on: {\n            ENDSPEECH: 'unrelated'\n          }\n        },\n        unrelated: {\n          always: '#root.dm.secondQuestion'\n        }\n      }\n    },\n    secondQuestion: {\n      initial: 'prompt',\n      on: {\n        RECOGNISED: [{\n          target: 'stop',\n          cond: context => context.recResult[0].utterance === 'No.'\n        }, {\n          target: 'helpWord',\n          cond: context => context.recResultL2[0].utterance.toLowerCase().includes(\"cómo se dice\")\n        }, {\n          target: 'unrelated'\n        }],\n        TIMEOUT: '..'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Did you have anything else?\"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: send('LISTEN')\n        }\n      }\n    },\n    stop: {\n      entry: say(\"Ok, good breakfast!\"),\n      always: 'init'\n    }\n  }\n};","map":{"version":3,"sources":["/home/andrea/Desktop/breakfast_demo/src/dmBreakfast.ts"],"names":["send","assign","say","text","_context","type","value","esDict","askL1","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","welcome","RECOGNISED","target","cond","context","recResultL2","utterance","toLowerCase","includes","TIMEOUT","prompt","entry","ENDSPEECH","ask","helpWord","event","unknownWord","split","length","replace","test","recResult","ack","provL2","unrelated","always","secondQuestion","stop"],"mappings":"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","sourcesContent":["/*\n(convered)\nEXAMPLE: SearchL2 + AskL1 + ProvL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nS> ¿Cómo se dice 'mermelada'? (<trans: how do you say 'jam'?)\nT> Jam\nS> Jam\n(it repeats until S pronounces the word 'jam' correctly)\nT> Uh-huh\nT> Did you have anything else?\n\n1.\nS> Yes, I had a juice too\nT> Yummy!\nT> Did you... (repeats until negative answer)\nT> Ok, good breakfast!\nSTOP --> init\n\n2.\nS> No.\nT> Ok, good breakfast!\nSTOP --> init\n\n------------------------------------\n\n(not convered so far)\nEXAMPLE: SearchL2 + ProvL1 + AskL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nS> Mermelada (<trans: jam>)\nS> ¿Cómo se dice? (<trans: how do you say it?)\nT> Jam\nS> Jam\nT> Jam\n\n\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nT> \n*/\n\n// maybe we can have helpword_1 for como se dice and helpword_2 for any other way of asking??\n\n\nimport { MachineConfig, send, assign, Action } from \"xstate\";\n\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\n\nconst esDict: { [index: string]: string } = {\n    'mermelada': 'jam.',\n    'mantequilla': 'butter.',\n    'tostada': 'toast.',\n    'cereales': 'cereals.',\n    'leche': 'milk.',\n    'café': 'coffee.',\n    'zumo': 'juice.',\n    'queso': 'cheese.',\n    'tortitas': 'pancakes.',\n    'jamón': 'ham.',\n    'yogur': 'yogurt.',\n    'aceite': 'olive oil',\n    'fruta': 'fruit.',\n    'tomate': 'tomato.'\n\n}\n\n\nlet askL1 = [\"cómo se dice\",\"cómo es\"]\n//indask --> no sé cómo se dice\n\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'welcome',\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    { target: 'helpWord', cond: (context) => context.recResultL2[0].utterance.toLowerCase().includes(\"cómo se dice\") },\n                    //{ target: 'helpWord', cond: (context) => askL1.map((x) => context.recResultL2[0].utterance.toLowerCase().includes(x)).reduce((a,b) => a||b) },\n                    { target: 'unrelated' }],\n                TIMEOUT: '..',\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What did you have for breakfast this morning?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                }\n            }\n        },\n        helpWord: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: [\n                        assign((context, event) => { return { unknownWord: esDict[context.recResultL2[0].utterance.split(\" \")[context.recResultL2[0].utterance.split(\" \").length - 1].replace(/[?!]/, \"\")] } }),\n                        send((context: SDSContext) => ({\n                        type: \"SPEAK\",\n                        value: context.unknownWord\n                    }))],\n                    on: { ENDSPEECH: 'test' }\n                },\n                test: {\n                    entry: send('LISTEN'),\n                    on: { RECOGNISED: \n                        [\n                        {target: 'ack', cond: (context) => context.unknownWord === context.recResult[0].utterance.toLowerCase()},\n                        {target: 'provL2'}\n                    ] \n                }\n                },\n                ack: {\n                    entry: say(\"Uh-huh\"),\n                    on: { ENDSPEECH: '#root.dm.secondQuestion' }\n                },\n                provL2: {\n                    entry: [\n                        send((context: SDSContext) => ({\n                        type: \"SPEAK\",\n                        value: context.unknownWord\n                    }))],\n                    on: { ENDSPEECH: 'test' }\n                }\n\n            }\n        },\n        unrelated: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: say(\"Yummy!\"),\n                    on: { ENDSPEECH: 'unrelated' }\n                },\n                unrelated: {\n                    always: '#root.dm.secondQuestion'\n                }\n            }\n        },\n        secondQuestion: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    { target: 'stop', cond: (context) => context.recResult[0].utterance === 'No.' },\n                    { target: 'helpWord', cond: (context) => context.recResultL2[0].utterance.toLowerCase().includes(\"cómo se dice\") },\n                    { target: 'unrelated' }],\n                TIMEOUT: '..',\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Did you have anything else?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                }\n            }\n        },\n        stop: {\n            entry: say(\"Ok, good breakfast!\"),\n            always: 'init'\n        },\n    }\n})\n\n"]},"metadata":{},"sourceType":"module"}