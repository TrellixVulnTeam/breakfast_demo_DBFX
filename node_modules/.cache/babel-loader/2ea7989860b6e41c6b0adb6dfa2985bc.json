{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Queue = void 0;\n\nvar Error_1 = require(\"./Error\");\n\nvar List_1 = require(\"./List\");\n\nvar Promise_1 = require(\"./Promise\");\n\nvar SubscriberType;\n\n(function (SubscriberType) {\n  SubscriberType[SubscriberType[\"Dequeue\"] = 0] = \"Dequeue\";\n  SubscriberType[SubscriberType[\"Peek\"] = 1] = \"Peek\";\n})(SubscriberType || (SubscriberType = {}));\n\nvar Queue = function () {\n  function Queue(list) {\n    var _this = this;\n\n    this.privPromiseStore = new List_1.List();\n    this.privIsDrainInProgress = false;\n    this.privIsDisposing = false;\n    this.privDisposeReason = null;\n\n    this.enqueue = function (item) {\n      _this.throwIfDispose();\n\n      _this.enqueueFromPromise(new Promise(function (resolve, reject) {\n        resolve(item);\n      }));\n    };\n\n    this.enqueueFromPromise = function (promise) {\n      _this.throwIfDispose();\n\n      promise.then(function (val) {\n        _this.privList.add(val);\n        /* tslint:disable:no-empty */\n\n      }, function (error) {});\n    };\n\n    this.dequeue = function () {\n      _this.throwIfDispose();\n\n      var deferredSubscriber = new Promise_1.Deferred();\n\n      if (_this.privSubscribers) {\n        _this.privSubscribers.add({\n          deferral: deferredSubscriber,\n          type: SubscriberType.Dequeue\n        });\n\n        _this.drain();\n      }\n\n      return deferredSubscriber.promise;\n    };\n\n    this.peek = function () {\n      _this.throwIfDispose();\n\n      var deferredSubscriber = new Promise_1.Deferred();\n      var subs = _this.privSubscribers;\n\n      if (subs) {\n        _this.privSubscribers.add({\n          deferral: deferredSubscriber,\n          type: SubscriberType.Peek\n        });\n\n        _this.drain();\n      }\n\n      return deferredSubscriber.promise;\n    };\n\n    this.length = function () {\n      _this.throwIfDispose();\n\n      return _this.privList.length();\n    };\n\n    this.isDisposed = function () {\n      return _this.privSubscribers == null;\n    };\n\n    this.drain = function () {\n      if (!_this.privIsDrainInProgress && !_this.privIsDisposing) {\n        _this.privIsDrainInProgress = true;\n        var subs = _this.privSubscribers;\n        var lists = _this.privList;\n\n        if (subs && lists) {\n          while (lists.length() > 0 && subs.length() > 0 && !_this.privIsDisposing) {\n            var subscriber = subs.removeFirst();\n\n            if (subscriber.type === SubscriberType.Peek) {\n              subscriber.deferral.resolve(lists.first());\n            } else {\n              var dequeuedItem = lists.removeFirst();\n              subscriber.deferral.resolve(dequeuedItem);\n            }\n          } // note: this block assumes cooperative multitasking, i.e.,\n          // between the if-statement and the assignment there are no\n          // thread switches.\n          // Reason is that between the initial const = this.; and this\n          // point there is the derral.resolve() operation that might have\n          // caused recursive calls to the Queue, especially, calling\n          // Dispose() on the queue alredy (which would reset the var\n          // here to null!).\n          // That should generally hold true for javascript...\n\n\n          if (_this.privSubscribers === subs) {\n            _this.privSubscribers = subs;\n          } // note: this block assumes cooperative multitasking, i.e.,\n          // between the if-statement and the assignment there are no\n          // thread switches.\n          // Reason is that between the initial const = this.; and this\n          // point there is the derral.resolve() operation that might have\n          // caused recursive calls to the Queue, especially, calling\n          // Dispose() on the queue alredy (which would reset the var\n          // here to null!).\n          // That should generally hold true for javascript...\n\n\n          if (_this.privList === lists) {\n            _this.privList = lists;\n          }\n        }\n\n        _this.privIsDrainInProgress = false;\n      }\n    };\n\n    this.throwIfDispose = function () {\n      if (_this.isDisposed()) {\n        if (_this.privDisposeReason) {\n          throw new Error_1.InvalidOperationError(_this.privDisposeReason);\n        }\n\n        throw new Error_1.ObjectDisposedError(\"Queue\");\n      } else if (_this.privIsDisposing) {\n        throw new Error_1.InvalidOperationError(\"Queue disposing\");\n      }\n    };\n\n    this.privList = list ? list : new List_1.List();\n    this.privDetachables = [];\n    this.privSubscribers = new List_1.List();\n    this.privDetachables.push(this.privList.onAdded(this.drain));\n  }\n\n  Queue.prototype.drainAndDispose = function (pendingItemProcessor, reason) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subs, subscriber, _i, _a, detachable, promiseArray_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(!this.isDisposed() && !this.privIsDisposing)) return [3\n            /*break*/\n            , 5];\n            this.privDisposeReason = reason;\n            this.privIsDisposing = true;\n            subs = this.privSubscribers;\n\n            if (subs) {\n              while (subs.length() > 0) {\n                subscriber = subs.removeFirst(); // TODO: this needs work (Resolve(null) instead?).\n\n                subscriber.deferral.resolve(undefined); // subscriber.deferral.reject(\"Disposed\");\n              } // note: this block assumes cooperative multitasking, i.e.,\n              // between the if-statement and the assignment there are no\n              // thread switches.\n              // Reason is that between the initial const = this.; and this\n              // point there is the derral.resolve() operation that might have\n              // caused recursive calls to the Queue, especially, calling\n              // Dispose() on the queue alredy (which would reset the var\n              // here to null!).\n              // That should generally hold true for javascript...\n\n\n              if (this.privSubscribers === subs) {\n                this.privSubscribers = subs;\n              }\n            }\n\n            _i = 0, _a = this.privDetachables;\n            _b.label = 1;\n\n          case 1:\n            if (!(_i < _a.length)) return [3\n            /*break*/\n            , 4];\n            detachable = _a[_i];\n            return [4\n            /*yield*/\n            , detachable.detach()];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\n              promiseArray_1 = [];\n              this.privPromiseStore.toArray().forEach(function (wrapper) {\n                promiseArray_1.push(wrapper);\n              });\n              return [2\n              /*return*/\n              , Promise.all(promiseArray_1).finally(function () {\n                _this.privSubscribers = null;\n\n                _this.privList.forEach(function (item, index) {\n                  pendingItemProcessor(item);\n                });\n\n                _this.privList = null;\n                return;\n              }).then()];\n            } else {\n              this.privSubscribers = null;\n              this.privList = null;\n            }\n\n            _b.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Queue.prototype.dispose = function (reason) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.drainAndDispose(null, reason)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return Queue;\n}();\n\nexports.Queue = Queue;","map":{"version":3,"sources":["src/common/Queue.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { List } from \"./List\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded(this.drain));\r\n    }\r\n\r\n    public enqueue = (item: TItem): void => {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void, reject: (reason: any) => void) => { resolve(item); }));\r\n    }\r\n\r\n    public enqueueFromPromise = (promise: Promise<TItem>): void => {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n             /* tslint:disable:no-empty */\r\n        }, (error: string): void => { });\r\n    }\r\n\r\n    public dequeue = (): Promise<TItem> => {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek = (): Promise<TItem> => {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length = (): number => {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>) => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally(() => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem, index: number): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain = (): void => {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose = (): void => {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}