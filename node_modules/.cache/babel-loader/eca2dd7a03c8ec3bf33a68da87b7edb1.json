{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SynthesisAdapterBase = void 0;\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar SpeechConnectionMessage_Internal_1 = require(\"./SpeechConnectionMessage.Internal\");\n\nvar SynthesisAdapterBase = function () {\n  function SynthesisAdapterBase(authentication, connectionFactory, synthesizerConfig, speechSynthesizer, audioDestination) {\n    var _this = this;\n\n    this.speakOverride = undefined;\n    this.receiveMessageOverride = undefined;\n    this.connectImplOverride = undefined;\n    this.configConnectionOverride = undefined;\n\n    this.sendSynthesisContext = function (connection) {\n      var synthesisContextJson = _this.synthesisContext.toJSON();\n\n      if (synthesisContextJson) {\n        return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_1.MessageType.Text, \"synthesis.context\", _this.privSynthesisTurn.requestId, \"application/json\", synthesisContextJson));\n      }\n\n      return;\n    };\n\n    this.sendSpeechServiceConfig = function (connection, SpeechServiceConfigJson) {\n      if (SpeechServiceConfigJson) {\n        return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_1.MessageType.Text, \"speech.config\", _this.privSynthesisTurn.requestId, \"application/json\", SpeechServiceConfigJson));\n      }\n    };\n\n    this.sendSsmlMessage = function (connection, ssml, requestId) {\n      return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_1.MessageType.Text, \"ssml\", requestId, \"application/ssml+xml\", ssml));\n    };\n\n    if (!authentication) {\n      throw new Exports_1.ArgumentNullError(\"authentication\");\n    }\n\n    if (!connectionFactory) {\n      throw new Exports_1.ArgumentNullError(\"connectionFactory\");\n    }\n\n    if (!synthesizerConfig) {\n      throw new Exports_1.ArgumentNullError(\"synthesizerConfig\");\n    }\n\n    this.privAuthentication = authentication;\n    this.privConnectionFactory = connectionFactory;\n    this.privSynthesizerConfig = synthesizerConfig;\n    this.privIsDisposed = false;\n    this.privSpeechSynthesizer = speechSynthesizer;\n    this.privSessionAudioDestination = audioDestination;\n    this.privSynthesisTurn = new Exports_3.SynthesisTurn();\n    this.privConnectionEvents = new Exports_1.EventSource();\n    this.privServiceEvents = new Exports_1.EventSource();\n    this.privSynthesisContext = new Exports_3.SynthesisContext(this.privSpeechSynthesizer);\n    this.privAgentConfig = new Exports_3.AgentConfig();\n    this.connectionEvents.attach(function (connectionEvent) {\n      if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        var connectionClosedEvent = connectionEvent;\n\n        if (connectionClosedEvent.statusCode !== 1000) {\n          _this.cancelSynthesisLocal(Exports_2.CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? Exports_2.CancellationErrorCode.BadRequestParameters : Exports_2.CancellationErrorCode.ConnectionFailure, connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\n        }\n      }\n    });\n  }\n\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"synthesisContext\", {\n    get: function () {\n      return this.privSynthesisContext;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"agentConfig\", {\n    get: function () {\n      return this.privAgentConfig;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"connectionEvents\", {\n    get: function () {\n      return this.privConnectionEvents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"serviceEvents\", {\n    get: function () {\n      return this.privServiceEvents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"activityTemplate\", {\n    get: function () {\n      return this.privActivityTemplate;\n    },\n    set: function (messagePayload) {\n      this.privActivityTemplate = messagePayload;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"audioOutputFormat\", {\n    set: function (format) {\n      this.privAudioOutputFormat = format;\n      this.privSynthesisTurn.audioOutputFormat = format;\n\n      if (this.privSessionAudioDestination !== undefined) {\n        this.privSessionAudioDestination.format = format;\n      }\n\n      if (this.synthesisContext !== undefined) {\n        this.synthesisContext.audioOutputFormat = format;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SynthesisAdapterBase.addHeader = function (audio, format) {\n    if (!format.hasHeader) {\n      return audio;\n    }\n\n    format.updateHeader(audio.byteLength);\n    var tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\n    tmp.set(new Uint8Array(format.header), 0);\n    tmp.set(new Uint8Array(audio), format.header.byteLength);\n    return tmp.buffer;\n  };\n\n  SynthesisAdapterBase.prototype.isDisposed = function () {\n    return this.privIsDisposed;\n  };\n\n  SynthesisAdapterBase.prototype.dispose = function (reason) {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.privIsDisposed = true;\n\n            if (this.privSessionAudioDestination !== undefined) {\n              this.privSessionAudioDestination.close();\n            }\n\n            if (!this.privConnectionConfigurationPromise) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.privConnectionConfigurationPromise];\n\n          case 1:\n            connection = _a.sent();\n            return [4\n            /*yield*/\n            , connection.dispose(reason)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SynthesisAdapterBase.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.connectImpl()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SynthesisAdapterBase.prototype.sendNetworkMessage = function (path, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var type, contentType, connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            type = typeof payload === \"string\" ? Exports_1.MessageType.Text : Exports_1.MessageType.Binary;\n            contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 1:\n            connection = _a.sent();\n            return [2\n            /*return*/\n            , connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload))];\n        }\n      });\n    });\n  };\n\n  SynthesisAdapterBase.prototype.Speak = function (text, isSSML, requestId, successCallback, errorCallBack, audioDestination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ssml, connection, synthesisStartEventArgs, messageRetrievalPromise, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (isSSML) {\n              ssml = text;\n            } else {\n              ssml = this.privSpeechSynthesizer.buildSsml(text);\n            }\n\n            if (this.speakOverride !== undefined) {\n              return [2\n              /*return*/\n              , this.speakOverride(ssml, requestId, successCallback, errorCallBack)];\n            }\n\n            this.privSuccessCallback = successCallback;\n            this.privErrorCallback = errorCallBack;\n            this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.connectImpl()];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 3:\n            connection = _a.sent();\n            return [4\n            /*yield*/\n            , this.sendSynthesisContext(connection)];\n\n          case 4:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.sendSsmlMessage(connection, ssml, requestId)];\n\n          case 5:\n            _a.sent();\n\n            synthesisStartEventArgs = new Exports_2.SpeechSynthesisEventArgs(new Exports_2.SpeechSynthesisResult(requestId, Exports_2.ResultReason.SynthesizingAudioStarted));\n\n            if (!!this.privSpeechSynthesizer.synthesisStarted) {\n              this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\n            }\n\n            messageRetrievalPromise = this.receiveMessage();\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            e_1 = _a.sent();\n            this.cancelSynthesisLocal(Exports_2.CancellationReason.Error, Exports_2.CancellationErrorCode.ConnectionFailure, e_1);\n            return [2\n            /*return*/\n            , Promise.reject(e_1)];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Cancels synthesis.\n\n\n  SynthesisAdapterBase.prototype.cancelSynthesis = function (requestId, cancellationReason, errorCode, error) {\n    var properties = new Exports_2.PropertyCollection();\n    properties.setProperty(Exports_3.CancellationErrorCodePropertyName, Exports_2.CancellationErrorCode[errorCode]);\n    var result = new Exports_2.SpeechSynthesisResult(requestId, Exports_2.ResultReason.Canceled, undefined, error, properties);\n\n    if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\n      var cancelEvent = new Exports_2.SpeechSynthesisEventArgs(result);\n\n      try {\n        this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      try {\n        this.privSuccessCallback(result);\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  }; // Cancels synthesis.\n\n\n  SynthesisAdapterBase.prototype.cancelSynthesisLocal = function (cancellationReason, errorCode, error) {\n    if (!!this.privSynthesisTurn.isSynthesizing) {\n      this.privSynthesisTurn.onStopSynthesizing();\n      this.cancelSynthesis(this.privSynthesisTurn.requestId, cancellationReason, errorCode, error);\n    }\n  };\n\n  SynthesisAdapterBase.prototype.processTypeSpecificMessages = function (connectionMessage, successCallback, errorCallBack) {\n    return true;\n  };\n\n  SynthesisAdapterBase.prototype.receiveMessage = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection, message, connectionMessage, _a, audioWithHeader, ev, metadataList, _i, metadataList_1, metadata, wordBoundaryEventArgs, bookmarkEventArgs, visemeEventArgs, result, audioBuffer, error_1, e_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 14,, 15]);\n\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 1:\n            connection = _b.sent();\n            return [4\n            /*yield*/\n            , connection.read()];\n\n          case 2:\n            message = _b.sent();\n\n            if (this.receiveMessageOverride !== undefined) {\n              return [2\n              /*return*/\n              , this.receiveMessageOverride()];\n            }\n\n            if (this.privIsDisposed) {\n              // We're done.\n              return [2\n              /*return*/\n              ];\n            } // indicates we are draining the queue and it came with no message;\n\n\n            if (!message) {\n              if (!this.privSynthesisTurn.isSynthesizing) {\n                return [2\n                /*return*/\n                ];\n              } else {\n                return [2\n                /*return*/\n                , this.receiveMessage()];\n              }\n            }\n\n            this.privServiceHasSentMessage = true;\n            connectionMessage = SpeechConnectionMessage_Internal_1.SpeechConnectionMessage.fromConnectionMessage(message);\n            if (!(connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase())) return [3\n            /*break*/\n            , 13];\n            _a = connectionMessage.path.toLowerCase();\n\n            switch (_a) {\n              case \"turn.start\":\n                return [3\n                /*break*/\n                , 3];\n\n              case \"response\":\n                return [3\n                /*break*/\n                , 4];\n\n              case \"audio\":\n                return [3\n                /*break*/\n                , 5];\n\n              case \"audio.metadata\":\n                return [3\n                /*break*/\n                , 6];\n\n              case \"turn.end\":\n                return [3\n                /*break*/\n                , 7];\n            }\n\n            return [3\n            /*break*/\n            , 12];\n\n          case 3:\n            this.privSynthesisTurn.onServiceTurnStartResponse();\n            return [3\n            /*break*/\n            , 13];\n\n          case 4:\n            this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\n            return [3\n            /*break*/\n            , 13];\n\n          case 5:\n            if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase() && !!connectionMessage.binaryBody) {\n              this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\n\n              if (!!this.privSpeechSynthesizer.synthesizing) {\n                try {\n                  audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\n                  ev = new Exports_2.SpeechSynthesisEventArgs(new Exports_2.SpeechSynthesisResult(this.privSynthesisTurn.requestId, Exports_2.ResultReason.SynthesizingAudio, audioWithHeader));\n                  this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n\n              if (this.privSessionAudioDestination !== undefined) {\n                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\n              }\n            }\n\n            return [3\n            /*break*/\n            , 13];\n\n          case 6:\n            metadataList = Exports_3.SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\n\n            for (_i = 0, metadataList_1 = metadataList; _i < metadataList_1.length; _i++) {\n              metadata = metadataList_1[_i];\n\n              switch (metadata.Type) {\n                case Exports_3.MetadataType.WordBoundary:\n                  this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\n                  wordBoundaryEventArgs = new Exports_2.SpeechSynthesisWordBoundaryEventArgs(metadata.Data.Offset, metadata.Data.text.Text, metadata.Data.text.Length, this.privSynthesisTurn.currentTextOffset);\n\n                  if (!!this.privSpeechSynthesizer.wordBoundary) {\n                    try {\n                      this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\n                    } catch (error) {// Not going to let errors in the event handler\n                      // trip things up.\n                    }\n                  }\n\n                  break;\n\n                case Exports_3.MetadataType.Bookmark:\n                  bookmarkEventArgs = new Exports_2.SpeechSynthesisBookmarkEventArgs(metadata.Data.Offset, metadata.Data.Bookmark);\n\n                  if (!!this.privSpeechSynthesizer.bookmarkReached) {\n                    try {\n                      this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\n                    } catch (error) {// Not going to let errors in the event handler\n                      // trip things up.\n                    }\n                  }\n\n                  break;\n\n                case Exports_3.MetadataType.Viseme:\n                  this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\n\n                  if (metadata.Data.IsLastAnimation) {\n                    visemeEventArgs = new Exports_2.SpeechSynthesisVisemeEventArgs(metadata.Data.Offset, metadata.Data.VisemeId, this.privSynthesisTurn.getAndClearVisemeAnimation());\n\n                    if (!!this.privSpeechSynthesizer.visemeReceived) {\n                      try {\n                        this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\n                      } catch (error) {// Not going to let errors in the event handler\n                        // trip things up.\n                      }\n                    }\n                  }\n\n                  break;\n              }\n            }\n\n            return [3\n            /*break*/\n            , 13];\n\n          case 7:\n            this.privSynthesisTurn.onServiceTurnEndResponse();\n            result = void 0;\n            _b.label = 8;\n\n          case 8:\n            _b.trys.push([8, 10,, 11]);\n\n            return [4\n            /*yield*/\n            , this.privSynthesisTurn.getAllReceivedAudioWithHeader()];\n\n          case 9:\n            audioBuffer = _b.sent();\n            result = new Exports_2.SpeechSynthesisResult(this.privSynthesisTurn.requestId, Exports_2.ResultReason.SynthesizingAudioCompleted, audioBuffer);\n\n            if (!!this.privSuccessCallback) {\n              this.privSuccessCallback(result);\n            }\n\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            error_1 = _b.sent();\n\n            if (!!this.privErrorCallback) {\n              this.privErrorCallback(error_1);\n            }\n\n            return [3\n            /*break*/\n            , 11];\n\n          case 11:\n            if (this.privSpeechSynthesizer.synthesisCompleted) {\n              try {\n                this.privSpeechSynthesizer.synthesisCompleted(this.privSpeechSynthesizer, new Exports_2.SpeechSynthesisEventArgs(result));\n              } catch (e) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            }\n\n            return [3\n            /*break*/\n            , 13];\n\n          case 12:\n            if (!this.processTypeSpecificMessages(connectionMessage)) {\n              // here are some messages that the derived class has not processed, dispatch them to connect class\n              if (!!this.privServiceEvents) {\n                this.serviceEvents.onEvent(new Exports_1.ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n              }\n            }\n\n            _b.label = 13;\n\n          case 13:\n            return [2\n            /*return*/\n            , this.receiveMessage()];\n\n          case 14:\n            e_2 = _b.sent();\n            return [3\n            /*break*/\n            , 15];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SynthesisAdapterBase.prototype.connectImpl = function (isUnAuthorized) {\n    var _this = this;\n\n    if (isUnAuthorized === void 0) {\n      isUnAuthorized = false;\n    }\n\n    if (this.privConnectionPromise) {\n      return this.privConnectionPromise.then(function (connection) {\n        if (connection.state() === Exports_1.ConnectionState.Disconnected) {\n          _this.privConnectionId = null;\n          _this.privConnectionPromise = null;\n          _this.privServiceHasSentMessage = false;\n          return _this.connectImpl();\n        }\n\n        return _this.privConnectionPromise;\n      }, function (error) {\n        _this.privConnectionId = null;\n        _this.privConnectionPromise = null;\n        _this.privServiceHasSentMessage = false;\n        return _this.connectImpl();\n      });\n    }\n\n    this.privAuthFetchEventId = Exports_1.createNoDashGuid();\n    this.privConnectionId = Exports_1.createNoDashGuid();\n    this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n    var authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n    this.privConnectionPromise = authPromise.then(function (result) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var connection, response;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privSynthesisTurn.onAuthCompleted(false)];\n\n            case 1:\n              _a.sent();\n\n              connection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId); // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n              // it'll stop sending events.\n\n              connection.events.attach(function (event) {\n                _this.connectionEvents.onEvent(event);\n              });\n              return [4\n              /*yield*/\n              , connection.open()];\n\n            case 2:\n              response = _a.sent();\n              if (!(response.statusCode === 200)) return [3\n              /*break*/\n              , 4];\n              return [4\n              /*yield*/\n              , this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode)];\n\n            case 3:\n              _a.sent();\n\n              return [2\n              /*return*/\n              , Promise.resolve(connection)];\n\n            case 4:\n              if (!(response.statusCode === 403 && !isUnAuthorized)) return [3\n              /*break*/\n              , 5];\n              return [2\n              /*return*/\n              , this.connectImpl(true)];\n\n            case 5:\n              return [4\n              /*yield*/\n              , this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason)];\n\n            case 6:\n              _a.sent();\n\n              return [2\n              /*return*/\n              , Promise.reject(\"Unable to contact server. StatusCode: \" + response.statusCode + \", \" + this.privSynthesizerConfig.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint) + \" Reason: \" + response.reason)];\n          }\n        });\n      });\n    }, function (error) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privSynthesisTurn.onAuthCompleted(true, error)];\n\n            case 1:\n              _a.sent();\n\n              throw new Error(error);\n          }\n        });\n      });\n    }); // Attach an empty handler to allow the promise to run in the background while\n    // other startup events happen. It'll eventually be awaited on.\n\n    this.privConnectionPromise.catch(function () {});\n    return this.privConnectionPromise;\n  };\n\n  SynthesisAdapterBase.prototype.fetchConnection = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.privConnectionConfigurationPromise) {\n              return [2\n              /*return*/\n              , this.privConnectionConfigurationPromise.then(function (connection) {\n                if (connection.state() === Exports_1.ConnectionState.Disconnected) {\n                  _this.privConnectionId = null;\n                  _this.privConnectionConfigurationPromise = null;\n                  _this.privServiceHasSentMessage = false;\n                  return _this.fetchConnection();\n                }\n\n                return _this.privConnectionConfigurationPromise;\n              }, function (error) {\n                _this.privConnectionId = null;\n                _this.privConnectionConfigurationPromise = null;\n                _this.privServiceHasSentMessage = false;\n                return _this.fetchConnection();\n              })];\n            }\n\n            this.privConnectionConfigurationPromise = this.configureConnection();\n            return [4\n            /*yield*/\n            , this.privConnectionConfigurationPromise];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  }; // Takes an established websocket connection to the endpoint and sends speech configuration information.\n\n\n  SynthesisAdapterBase.prototype.configureConnection = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.connectImpl()];\n\n          case 1:\n            connection = _a.sent();\n\n            if (this.configConnectionOverride !== undefined) {\n              return [2\n              /*return*/\n              , this.configConnectionOverride(connection)];\n            }\n\n            return [4\n            /*yield*/\n            , this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize())];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , connection];\n        }\n      });\n    });\n  };\n\n  SynthesisAdapterBase.telemetryDataEnabled = true;\n  return SynthesisAdapterBase;\n}();\n\nexports.SynthesisAdapterBase = SynthesisAdapterBase;","map":{"version":3,"sources":["src/common.speech/SynthesisAdapterBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSpeechSynthesizer: SpeechSynthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected receiveMessageOverride: () => any = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => any = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => any = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static addHeader(audio: ArrayBuffer, format: AudioOutputFormatImpl): ArrayBuffer {\r\n        if (!format.hasHeader) {\r\n            return audio;\r\n        }\r\n        format.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\r\n        tmp.set(new Uint8Array(format.header), 0);\r\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSpeechSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                new SpeechSynthesisResult(\r\n                    requestId,\r\n                    ResultReason.SynthesizingAudioStarted,\r\n                )\r\n            );\r\n\r\n            if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n                this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n            }\r\n\r\n            const messageRetrievalPromise = this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack?: (e: string) => void): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse();\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            if (!!this.privSpeechSynthesizer.synthesizing) {\r\n                                try {\r\n                                    const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\r\n                                    const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                                        new SpeechSynthesisResult(\r\n                                            this.privSynthesisTurn.requestId,\r\n                                            ResultReason.SynthesizingAudio,\r\n                                            audioWithHeader));\r\n                                    this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n                                } catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                    this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\r\n\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        this.privSynthesisTurn.currentTextOffset);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n\r\n                                        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n                                            } catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            const audioBuffer: ArrayBuffer = await this.privSynthesisTurn.getAllReceivedAudioWithHeader();\r\n                            result = new SpeechSynthesisResult(\r\n                                this.privSynthesisTurn.requestId,\r\n                                ResultReason.SynthesizingAudioCompleted,\r\n                                audioBuffer\r\n                            );\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error);\r\n                            }\r\n                        }\r\n                        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n                            try {\r\n                                this.privSpeechSynthesizer.synthesisCompleted(\r\n                                    this.privSpeechSynthesizer,\r\n                                    new SpeechSynthesisEventArgs(result)\r\n                                );\r\n                            } catch (e) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext = (connection: IConnection): Promise<void> => {\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo) => {\r\n            await this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent) => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                await this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                await this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n            }\r\n        }, async (error: string): Promise<IConnection> => {\r\n            await this.privSynthesisTurn.onAuthCompleted(true, error);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        this.privConnectionPromise.catch(() => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig = (connection: IConnection, SpeechServiceConfigJson: string): Promise<void> => {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage = (connection: IConnection, ssml: string, requestId: string): Promise<void> => {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}