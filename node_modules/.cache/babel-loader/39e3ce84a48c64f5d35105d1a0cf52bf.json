{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranscriptionServiceRecognizer = void 0;\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar SpeechConnectionMessage_Internal_1 = require(\"./SpeechConnectionMessage.Internal\"); // tslint:disable-next-line:max-classes-per-file\n\n\nvar TranscriptionServiceRecognizer = function (_super) {\n  __extends(TranscriptionServiceRecognizer, _super);\n\n  function TranscriptionServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, transcriber) {\n    var _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, transcriber) || this;\n\n    _this.sendSpeechEvent = function (connection, payload) {\n      var speechEventJson = JSON.stringify(payload);\n\n      if (speechEventJson) {\n        return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_1.MessageType.Text, \"speech.event\", _this.privRequestSession.requestId, \"application/json\", speechEventJson));\n      }\n\n      return;\n    };\n\n    _this.privTranscriberRecognizer = transcriber;\n    _this.sendPrePayloadJSONOverride = _this.sendTranscriptionStartJSON;\n    return _this;\n  }\n\n  TranscriptionServiceRecognizer.prototype.sendSpeechEventAsync = function (info, command) {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!!this.privRequestSession.isRecognizing) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 1:\n            connection = _a.sent();\n            return [4\n            /*yield*/\n            , this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command))];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TranscriptionServiceRecognizer.prototype.processTypeSpecificMessages = function (connectionMessage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, resultProps, processed, _a, hypothesis, offset, ev, simple, resultReason, cancelReason, detailed, totalOffset, offsetCorrectedJson, event_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            resultProps = new Exports_2.PropertyCollection();\n            resultProps.setProperty(Exports_2.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n            processed = false;\n            _a = connectionMessage.path.toLowerCase();\n\n            switch (_a) {\n              case \"speech.hypothesis\":\n                return [3\n                /*break*/\n                , 1];\n\n              case \"speech.fragment\":\n                return [3\n                /*break*/\n                , 1];\n\n              case \"speech.phrase\":\n                return [3\n                /*break*/\n                , 2];\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 1:\n            hypothesis = Exports_3.SpeechHypothesis.fromJSON(connectionMessage.textBody);\n            offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n            result = new Exports_2.SpeechRecognitionResult(this.privRequestSession.requestId, Exports_2.ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, hypothesis.SpeakerId, undefined, connectionMessage.textBody, resultProps);\n            this.privRequestSession.onHypothesis(offset);\n            ev = new Exports_2.SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n            if (!!this.privTranscriberRecognizer.recognizing) {\n              try {\n                this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            }\n\n            processed = true;\n            return [3\n            /*break*/\n            , 7];\n\n          case 2:\n            simple = Exports_3.SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n            resultReason = Exports_3.EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n            if (!(Exports_2.ResultReason.Canceled === resultReason)) return [3\n            /*break*/\n            , 4];\n            cancelReason = Exports_3.EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n            return [4\n            /*yield*/\n            , this.cancelRecognitionLocal(cancelReason, Exports_3.EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus), undefined)];\n\n          case 3:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === Exports_2.ResultReason.NoMatch && simple.RecognitionStatus !== Exports_3.RecognitionStatus.InitialSilenceTimeout)) {\n              if (this.privRecognizerConfig.parameters.getProperty(Exports_3.OutputFormatPropertyName) === Exports_2.OutputFormat[Exports_2.OutputFormat.Simple]) {\n                result = new Exports_2.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, simple.SpeakerId, undefined, connectionMessage.textBody, resultProps);\n              } else {\n                detailed = Exports_3.DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n                totalOffset = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\n                offsetCorrectedJson = detailed.getJsonWithCorrectedOffsets(totalOffset);\n                result = new Exports_2.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === Exports_3.RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, totalOffset, detailed.Language, detailed.LanguageDetectionConfidence, undefined, undefined, offsetCorrectedJson, resultProps);\n              }\n\n              event_1 = new Exports_2.SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n              if (!!this.privTranscriberRecognizer.recognized) {\n                try {\n                  this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event_1);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            }\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n\n            _b.label = 5;\n\n          case 5:\n            processed = true;\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            return [2\n            /*return*/\n            , processed];\n        }\n      });\n    });\n  }; // Cancels recognition.\n\n\n  TranscriptionServiceRecognizer.prototype.cancelRecognition = function (sessionId, requestId, cancellationReason, errorCode, error) {\n    var properties = new Exports_2.PropertyCollection();\n    properties.setProperty(Exports_3.CancellationErrorCodePropertyName, Exports_2.CancellationErrorCode[errorCode]);\n\n    if (!!this.privTranscriberRecognizer.canceled) {\n      var cancelEvent = new Exports_2.ConversationTranscriptionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n      try {\n        this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      var result = new Exports_2.SpeechRecognitionResult(requestId, Exports_2.ResultReason.Canceled, undefined, // Text\n      undefined, // Duration\n      undefined, // Offset\n      undefined, // Language\n      undefined, // Language Detection Confidence\n      undefined, // Speaker Id\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  }; // Encapsulated for derived service recognizers that need to send additional JSON\n\n\n  TranscriptionServiceRecognizer.prototype.sendTranscriptionStartJSON = function (connection) {\n    return __awaiter(this, void 0, void 0, function () {\n      var info, payload;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.sendSpeechContext(connection)];\n\n          case 1:\n            _a.sent();\n\n            info = this.privTranscriberRecognizer.getConversationInfo();\n            payload = this.createSpeechEventPayload(info, \"start\");\n            return [4\n            /*yield*/\n            , this.sendSpeechEvent(connection, payload)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.sendWaveHeader(connection)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TranscriptionServiceRecognizer.prototype.createSpeechEventPayload = function (info, command) {\n    var meeting = \"meeting\";\n    var eventDict = {\n      id: meeting,\n      name: command,\n      meeting: info.conversationProperties\n    };\n    var idString = \"id\";\n    var attendees = \"attendees\";\n    var record = \"record\";\n    eventDict[meeting][idString] = info.id;\n    eventDict[meeting][attendees] = info.participants;\n    eventDict[meeting][record] = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\n    return eventDict;\n  };\n\n  return TranscriptionServiceRecognizer;\n}(Exports_3.ServiceRecognizerBase);\n\nexports.TranscriptionServiceRecognizer = TranscriptionServiceRecognizer;","map":{"version":3,"sources":["src/common.speech/TranscriptionServiceRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { ConversationInfo } from \"../sdk/Transcription/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n    TranscriberRecognizer\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = this.sendTranscriptionStartJSON;\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    hypothesis.SpeakerId,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privTranscriberRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus),\r\n                        undefined);\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranscriberRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranscriberRecognizer.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection);\r\n        const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n        const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n        await this.sendSpeechEvent(connection, payload);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent = (connection: IConnection, payload: { [id: string]: any }): Promise<void> => {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const meeting: string = \"meeting\";\r\n        const eventDict: { [id: string]: any } = { id: meeting, name: command, meeting: info.conversationProperties };\r\n        const idString: string = \"id\";\r\n        const attendees: string = \"attendees\";\r\n        const record: string = \"record\";\r\n        eventDict[meeting][idString] = info.id;\r\n        eventDict[meeting][attendees] = info.participants;\r\n        eventDict[meeting][record] = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\r\n        return eventDict;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}