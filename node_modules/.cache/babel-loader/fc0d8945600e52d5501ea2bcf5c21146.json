{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeakerIdMessageAdapter = void 0;\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n/**\n * Implements methods for speaker recognition classes, sending requests to endpoint\n * and parsing response into expected format\n * @class SpeakerIdMessageAdapter\n */\n\n\nvar SpeakerIdMessageAdapter = function () {\n  function SpeakerIdMessageAdapter(config) {\n    var endpoint = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n    if (!endpoint) {\n      var region = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, \"westus\");\n      var version = config.parameters.getProperty(Exports_2.PropertyId.SpeakerRecognition_Api_Version, \"2.0\");\n      var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n      var host = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Host, \"https://\" + region + \".api.cognitive\" + hostSuffix + \"/speaker/{mode}/v\" + version + \"/{dependency}\");\n      endpoint = host + \"/profiles\";\n    }\n\n    this.privUri = endpoint;\n    var options = Exports_1.RestConfigBase.requestOptions;\n    options.headers[Exports_1.RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, undefined);\n    this.privRestAdapter = new Exports_1.RestMessageAdapter(options);\n  }\n  /**\n   * Sends create profile request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of voice profile to create.\n   * @param {string} lang - language/locale of voice profile\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\n   */\n\n\n  SpeakerIdMessageAdapter.prototype.createProfile = function (profileType, lang) {\n    var uri = this.getOperationUri(profileType);\n    return this.privRestAdapter.request(Exports_1.RestRequestType.Post, uri, {}, {\n      locale: lang\n    });\n  };\n  /**\n   * Sends create enrollment request to endpoint.\n   * @function\n   * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n\n\n  SpeakerIdMessageAdapter.prototype.createEnrollment = function (profile, audioSource) {\n    var _this = this;\n\n    var uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\n    return audioSource.blob.then(function (result) {\n      return _this.privRestAdapter.request(Exports_1.RestRequestType.File, uri, {\n        ignoreMinLength: \"true\"\n      }, null, result);\n    });\n  };\n  /**\n   * Sends verification request to endpoint.\n   * @function\n   * @param {SpeakerVerificationModel} model - voice model to verify against.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n\n\n  SpeakerIdMessageAdapter.prototype.verifySpeaker = function (model, audioSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var uri, result, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \"/verify\";\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , audioSource.blob];\n\n          case 2:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , this.privRestAdapter.request(Exports_1.RestRequestType.File, uri, {\n              ignoreMinLength: \"true\"\n            }, null, result)];\n\n          case 3:\n            e_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.resolve({\n              data: e_1\n            })];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sends identification request to endpoint.\n   * @function\n   * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n\n\n  SpeakerIdMessageAdapter.prototype.identifySpeaker = function (model, audioSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var uri, result, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            uri = this.getOperationUri(Exports_2.VoiceProfileType.TextIndependentIdentification) + \"/identifySingleSpeaker\";\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , audioSource.blob];\n\n          case 2:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , this.privRestAdapter.request(Exports_1.RestRequestType.File, uri, {\n              profileIds: model.voiceProfileIds,\n              ignoreMinLength: \"true\"\n            }, null, result)];\n\n          case 3:\n            e_2 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.resolve({\n              data: e_2\n            })];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sends profile status request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to check.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to status request\n   */\n\n\n  SpeakerIdMessageAdapter.prototype.getProfileStatus = function (profile) {\n    var uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\n    return this.privRestAdapter.request(Exports_1.RestRequestType.Get, uri, {});\n  };\n  /**\n   * Sends get all profiles request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of profiles to return list of\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing all profiles\n   */\n\n\n  SpeakerIdMessageAdapter.prototype.getProfiles = function (profileType) {\n    var uri = this.getOperationUri(profileType);\n    return this.privRestAdapter.request(Exports_1.RestRequestType.Get, uri, {});\n  };\n  /**\n   * Sends get activation/auth phrases request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of profiles to return phrases for\n   * @param {string} lang - language/locale of voice profile\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\n   */\n\n\n  SpeakerIdMessageAdapter.prototype.getPhrases = function (profileType, lang) {\n    var uri = (\"\" + this.getOperationUri(profileType)).replace(\"profiles\", \"phrases\") + \"/\" + lang;\n    return this.privRestAdapter.request(Exports_1.RestRequestType.Get, uri, {});\n  };\n  /**\n   * Sends delete profile request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to delete.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to deletion request\n   */\n\n\n  SpeakerIdMessageAdapter.prototype.deleteProfile = function (profile) {\n    var uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\n    return this.privRestAdapter.request(Exports_1.RestRequestType.Delete, uri, {});\n  };\n  /**\n   * Sends reset profile request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to reset enrollments for.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to reset request\n   */\n\n\n  SpeakerIdMessageAdapter.prototype.resetProfile = function (profile) {\n    var uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/reset\";\n    return this.privRestAdapter.request(Exports_1.RestRequestType.Post, uri, {});\n  };\n\n  SpeakerIdMessageAdapter.prototype.getOperationUri = function (profileType) {\n    var mode = profileType === Exports_2.VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\n    var dependency = profileType === Exports_2.VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\n    return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\n  };\n\n  return SpeakerIdMessageAdapter;\n}();\n\nexports.SpeakerIdMessageAdapter = SpeakerIdMessageAdapter;","map":{"version":3,"sources":["src/common.speech/SpeakerIdMessageAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    PropertyId,\r\n    SpeakerIdentificationModel,\r\n    SpeakerVerificationModel,\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"../sdk/Exports\";\r\nimport { SpeakerRecognitionConfig } from \"./Exports\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SpeakerIdMessageAdapter\r\n */\r\nexport class SpeakerIdMessageAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n\r\n    public constructor(config: SpeakerRecognitionConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const version: string = config.parameters.getProperty(PropertyId.SpeakerRecognition_Api_Version, \"2.0\");\r\n            const hostSuffix: string = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.api.cognitive${hostSuffix}/speaker/{mode}/v${version}/{dependency}`);\r\n            endpoint = host + \"/profiles\";\r\n        }\r\n        this.privUri = endpoint;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends create profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of voice profile to create.\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\r\n     */\r\n    public createProfile(profileType: VoiceProfileType, lang: string):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, {}, { locale: lang });\r\n    }\r\n\r\n    /**\r\n     * Sends create enrollment request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public createEnrollment(profile: VoiceProfile, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\r\n        return audioSource.blob.then<IRestResponse>((result: Blob | Buffer): Promise<IRestResponse> => {\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, { ignoreMinLength: \"true\" }, null, result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends verification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerVerificationModel} model - voice model to verify against.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async verifySpeaker(model: SpeakerVerificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \"/verify\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, { ignoreMinLength: \"true\" }, null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends identification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async identifySpeaker(model: SpeakerIdentificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \"/identifySingleSpeaker\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, { profileIds: model.voiceProfileIds, ignoreMinLength: \"true\" }, null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends profile status request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to check.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getProfileStatus(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, {});\r\n    }\r\n\r\n    /**\r\n     * Sends get all profiles request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return list of\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing all profiles\r\n     */\r\n    public getProfiles(profileType: VoiceProfileType): Promise<IRestResponse> {\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, {});\r\n    }\r\n\r\n    /**\r\n     * Sends get activation/auth phrases request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return phrases for\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\r\n     */\r\n    public getPhrases(profileType: VoiceProfileType, lang: string): Promise<IRestResponse> {\r\n        const uri = `${this.getOperationUri(profileType)}`.replace(`profiles`, `phrases`) + \"/\" + lang;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, {});\r\n    }\r\n\r\n    /**\r\n     * Sends delete profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to delete.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to deletion request\r\n     */\r\n    public deleteProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\r\n        return this.privRestAdapter.request(RestRequestType.Delete, uri, {});\r\n    }\r\n\r\n    /**\r\n     * Sends reset profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to reset enrollments for.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to reset request\r\n     */\r\n    public resetProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/reset\";\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, {});\r\n    }\r\n\r\n    private getOperationUri(profileType: VoiceProfileType): string {\r\n\r\n        const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\r\n        const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\r\n        return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}