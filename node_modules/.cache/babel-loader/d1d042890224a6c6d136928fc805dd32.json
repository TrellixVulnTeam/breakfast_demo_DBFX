{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseAudioPlayer = void 0;\n\nvar Error_1 = require(\"../../common/Error\");\n\nvar Promise_1 = require(\"../../common/Promise\");\n\nvar Exports_1 = require(\"../Exports\");\n\nvar AudioStreamFormat_1 = require(\"./AudioStreamFormat\");\n/**\n * Base audio player class\n * TODO: Plays only PCM for now.\n * @class\n */\n\n\nvar BaseAudioPlayer = function () {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\n   */\n  function BaseAudioPlayer(audioFormat) {\n    this.audioContext = null;\n    this.gainNode = null;\n    this.autoUpdateBufferTimer = 0;\n\n    if (audioFormat === undefined) {\n      audioFormat = Exports_1.AudioStreamFormat.getDefaultInputFormat();\n    }\n\n    this.init(audioFormat);\n  }\n  /**\n   * play Audio sample\n   * @param newAudioData audio data to be played.\n   */\n\n\n  BaseAudioPlayer.prototype.playAudioSample = function (newAudioData, cb, err) {\n    var _this = this;\n\n    Promise_1.marshalPromiseToCallbacks(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var audioData, newSamplesData;\n        return __generator(this, function (_a) {\n          this.ensureInitializedContext();\n          audioData = this.formatAudioData(newAudioData);\n          newSamplesData = new Float32Array(this.samples.length + audioData.length);\n          newSamplesData.set(this.samples, 0);\n          newSamplesData.set(audioData, this.samples.length);\n          this.samples = newSamplesData;\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    }(), cb, err);\n  };\n  /**\n   * stops audio and clears the buffers\n   */\n\n\n  BaseAudioPlayer.prototype.stopAudio = function (cb, err) {\n    if (this.audioContext !== null) {\n      this.samples = new Float32Array();\n      clearInterval(this.autoUpdateBufferTimer);\n      this.audioContext.close().then(function () {\n        if (!!cb) {\n          cb();\n        }\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n      this.audioContext = null;\n    }\n  };\n\n  BaseAudioPlayer.prototype.init = function (audioFormat) {\n    this.audioFormat = audioFormat;\n    this.samples = new Float32Array();\n  };\n\n  BaseAudioPlayer.prototype.ensureInitializedContext = function () {\n    var _this = this;\n\n    if (this.audioContext === null) {\n      this.createAudioContext();\n      var timerPeriod = 200;\n      this.autoUpdateBufferTimer = setInterval(function () {\n        _this.updateAudioBuffer();\n      }, timerPeriod);\n    }\n  };\n\n  BaseAudioPlayer.prototype.createAudioContext = function () {\n    // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\n    this.audioContext = AudioStreamFormat_1.AudioStreamFormatImpl.getAudioContext(); // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\n    // to control the volume, not likely\n\n    this.gainNode = this.audioContext.createGain();\n    this.gainNode.gain.value = 1;\n    this.gainNode.connect(this.audioContext.destination);\n    this.startTime = this.audioContext.currentTime;\n  };\n\n  BaseAudioPlayer.prototype.formatAudioData = function (audioData) {\n    switch (this.audioFormat.bitsPerSample) {\n      case 8:\n        return this.formatArrayBuffer(new Int8Array(audioData), 128);\n\n      case 16:\n        return this.formatArrayBuffer(new Int16Array(audioData), 32768);\n\n      case 32:\n        return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\n\n      default:\n        throw new Error_1.InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\n    }\n  };\n\n  BaseAudioPlayer.prototype.formatArrayBuffer = function (audioData, maxValue) {\n    var float32Data = new Float32Array(audioData.length);\n\n    for (var i = 0; i < audioData.length; i++) {\n      float32Data[i] = audioData[i] / maxValue;\n    }\n\n    return float32Data;\n  };\n\n  BaseAudioPlayer.prototype.updateAudioBuffer = function () {\n    if (this.samples.length === 0) {\n      return;\n    }\n\n    var channelCount = this.audioFormat.channels;\n    var bufferSource = this.audioContext.createBufferSource();\n    var frameCount = this.samples.length / channelCount;\n    var audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec); // TODO: Should we do the conversion in the pushAudioSample instead?\n\n    for (var channel = 0; channel < channelCount; channel++) {\n      // Fill in individual channel data\n      var channelOffset = channel;\n      var audioData = audioBuffer.getChannelData(channel);\n\n      for (var i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\n        audioData[i] = this.samples[channelOffset];\n      }\n    }\n\n    if (this.startTime < this.audioContext.currentTime) {\n      this.startTime = this.audioContext.currentTime;\n    }\n\n    bufferSource.buffer = audioBuffer;\n    bufferSource.connect(this.gainNode);\n    bufferSource.start(this.startTime); // Make sure we play the next sample after the current one.\n\n    this.startTime += audioBuffer.duration; // Clear the samples for the next pushed data.\n\n    this.samples = new Float32Array();\n  };\n\n  BaseAudioPlayer.prototype.playAudio = function (audioData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var source, destination;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.audioContext === null) {\n              this.createAudioContext();\n            }\n\n            source = this.audioContext.createBufferSource();\n            destination = this.audioContext.destination;\n            return [4\n            /*yield*/\n            , this.audioContext.decodeAudioData(audioData, function (newBuffer) {\n              source.buffer = newBuffer;\n              source.connect(destination);\n              source.start(0);\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return BaseAudioPlayer;\n}();\n\nexports.BaseAudioPlayer = BaseAudioPlayer;","map":{"version":3,"sources":["src/sdk/Audio/BaseAudioPlayer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Promise\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n                this.ensureInitializedContext();\r\n                const audioData = this.formatAudioData(newAudioData);\r\n                const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n                newSamplesData.set(this.samples, 0);\r\n                newSamplesData.set(audioData, this.samples.length);\r\n                this.samples = newSamplesData;\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval(() => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}