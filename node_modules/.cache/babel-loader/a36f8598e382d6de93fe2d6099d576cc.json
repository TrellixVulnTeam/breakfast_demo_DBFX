{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranslationRecognizer = void 0;\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Exports_2 = require(\"../common/Exports\");\n\nvar Connection_1 = require(\"./Connection\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_3 = require(\"./Exports\");\n/**\n * Translation recognizer\n * @class TranslationRecognizer\n */\n\n\nvar TranslationRecognizer = function (_super) {\n  __extends(TranslationRecognizer, _super);\n  /**\n   * Initializes an instance of the TranslationRecognizer.\n   * @constructor\n   * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n\n\n  function TranslationRecognizer(speechConfig, audioConfig) {\n    var _this = this;\n\n    var configImpl = speechConfig;\n    Contracts_1.Contracts.throwIfNull(configImpl, \"speechConfig\");\n    _this = _super.call(this, audioConfig, configImpl.properties, new Exports_1.TranslationConnectionFactory()) || this;\n    _this.privDisposedTranslationRecognizer = false;\n    _this.privProperties = configImpl.properties.clone();\n\n    if (_this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationVoice), Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n\n    Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationToLanguages), Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_TranslationToLanguages]);\n    Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage), Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage]);\n    return _this;\n  }\n\n  Object.defineProperty(TranslationRecognizer.prototype, \"speechRecognitionLanguage\", {\n    /**\n     * Gets the language name that was set when the recognizer was created.\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} Gets the language name that was set when the recognizer was created.\n     */\n    get: function () {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TranslationRecognizer.prototype, \"targetLanguages\", {\n    /**\n     * Gets target languages for translation that were set when the recognizer was created.\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\n     * @member TranslationRecognizer.prototype.targetLanguages\n     * @function\n     * @public\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\n     */\n    get: function () {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TranslationRecognizer.prototype, \"voiceName\", {\n    /**\n     * Gets the name of output voice.\n     * @member TranslationRecognizer.prototype.voiceName\n     * @function\n     * @public\n     * @returns {string} the name of output voice.\n     */\n    get: function () {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TranslationRecognizer.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function () {\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - Authorization token.\n     */\n    set: function (value) {\n      this.properties.setProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TranslationRecognizer.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this TranslationRecognizer.\n     * @member TranslationRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\n     */\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Starts recognition and translation, and stops after the first utterance is recognized.\n   * The task returns the translation text as result.\n   * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\n   *       for single shot recognition like command or query. For long-running recognition,\n   *       use startContinuousRecognitionAsync() instead.\n   * @member TranslationRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the result when the translation has completed.\n   * @param err - Callback invoked in case of an error.\n   */\n\n  TranslationRecognizer.prototype.recognizeOnceAsync = function (cb, err) {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    Exports_2.marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(Exports_1.RecognitionMode.Conversation), cb, err);\n  };\n  /**\n   * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive translation results.\n   * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the translation has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  TranslationRecognizer.prototype.startContinuousRecognitionAsync = function (cb, err) {\n    Exports_2.marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(Exports_1.RecognitionMode.Conversation), cb, err);\n  };\n  /**\n   * Stops continuous recognition and translation.\n   * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the translation has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  TranslationRecognizer.prototype.stopContinuousRecognitionAsync = function (cb, err) {\n    Exports_2.marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  };\n  /**\n   * dynamically remove a language from list of target language\n   * (can be used while recognition is ongoing)\n   * @member TranslationRecognizer.prototype.removeTargetLanguage\n   * @function\n   * @param lang - language to be removed\n   * @public\n   */\n\n\n  TranslationRecognizer.prototype.removeTargetLanguage = function (lang) {\n    Contracts_1.Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\n\n    if (this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      var languages = this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n      var index = languages.indexOf(lang);\n\n      if (index > -1) {\n        languages.splice(index, 1);\n        this.properties.setProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n        this.updateLanguages(languages);\n      }\n    }\n  };\n  /**\n   * dynamically add a language to list of target language\n   * (can be used while recognition is ongoing)\n   * @member TranslationRecognizer.prototype.addTargetLanguage\n   * @function\n   * @param lang - language to be added\n   * @public\n   */\n\n\n  TranslationRecognizer.prototype.addTargetLanguage = function (lang) {\n    Contracts_1.Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\n    var languages = [];\n\n    if (this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      languages = this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n\n      if (!languages.includes(lang)) {\n        languages.push(lang);\n        this.properties.setProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n      }\n    } else {\n      this.properties.setProperty(Exports_3.PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\n      languages = [lang];\n    }\n\n    this.updateLanguages(languages);\n  };\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member TranslationRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  TranslationRecognizer.prototype.close = function (cb, errorCb) {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    Exports_2.marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  };\n  /**\n   * handles ConnectionEstablishedEvent for conversation translation scenarios.\n   * @member TranslationRecognizer.prototype.onConnection\n   * @function\n   * @public\n   */\n\n  /* tslint:disable:no-empty */\n\n\n  TranslationRecognizer.prototype.onConnection = function () {};\n  /**\n   * handles disconnection events for conversation translation scenarios.\n   * @member TranslationRecognizer.prototype.onDisconnection\n   * @function\n   * @public\n   */\n\n  /* tslint:disable:no-empty */\n\n\n  TranslationRecognizer.prototype.onDisconnection = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  TranslationRecognizer.prototype.dispose = function (disposing) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.privDisposedTranslationRecognizer) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            this.privDisposedTranslationRecognizer = true;\n            if (!disposing) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.implRecognizerStop()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , _super.prototype.dispose.call(this, disposing)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TranslationRecognizer.prototype.createRecognizerConfig = function (speechConfig) {\n    return new Exports_1.RecognizerConfig(speechConfig, this.properties);\n  };\n\n  TranslationRecognizer.prototype.createServiceRecognizer = function (authentication, connectionFactory, audioConfig, recognizerConfig) {\n    var configImpl = audioConfig;\n    return new Exports_1.TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  };\n\n  TranslationRecognizer.prototype.updateLanguages = function (languages) {\n    var conn = Connection_1.Connection.fromRecognizer(this);\n\n    if (!!conn) {\n      conn.setMessageProperty(\"speech.context\", \"translationcontext\", {\n        to: languages\n      });\n      conn.sendMessageAsync(\"event\", JSON.stringify({\n        id: \"translation\",\n        name: \"updateLanguage\",\n        to: languages\n      }));\n    }\n  };\n\n  return TranslationRecognizer;\n}(Exports_3.Recognizer);\n\nexports.TranslationRecognizer = TranslationRecognizer;","map":{"version":3,"sources":["src/sdk/TranslationRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Connection } from \"./Connection\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n        this.privProperties = configImpl.properties.clone();\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\r\n     *       for single shot recognition like command or query. For long-running recognition,\r\n     *       use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public onConnection(): void { }\r\n\r\n    /**\r\n     * handles disconnection events for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onDisconnection\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public async onDisconnection(): Promise<void> { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}