{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.type = exports.connectivity = exports.Device = exports.OS = exports.System = exports.Context = exports.SpeechServiceConfig = exports.RecognizerConfig = exports.SpeechResultFormat = exports.RecognitionMode = void 0; // tslint:disable:max-classes-per-file\n\nvar Exports_1 = require(\"../sdk/Exports\");\n\nvar RecognitionMode;\n\n(function (RecognitionMode) {\n  RecognitionMode[RecognitionMode[\"Interactive\"] = 0] = \"Interactive\";\n  RecognitionMode[RecognitionMode[\"Conversation\"] = 1] = \"Conversation\";\n  RecognitionMode[RecognitionMode[\"Dictation\"] = 2] = \"Dictation\";\n})(RecognitionMode = exports.RecognitionMode || (exports.RecognitionMode = {}));\n\nvar SpeechResultFormat;\n\n(function (SpeechResultFormat) {\n  SpeechResultFormat[SpeechResultFormat[\"Simple\"] = 0] = \"Simple\";\n  SpeechResultFormat[SpeechResultFormat[\"Detailed\"] = 1] = \"Detailed\";\n})(SpeechResultFormat = exports.SpeechResultFormat || (exports.SpeechResultFormat = {}));\n\nvar RecognizerConfig = function () {\n  function RecognizerConfig(speechServiceConfig, parameters) {\n    this.privRecognitionMode = RecognitionMode.Interactive;\n    this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\n    this.privParameters = parameters;\n    this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\n  }\n\n  Object.defineProperty(RecognizerConfig.prototype, \"parameters\", {\n    get: function () {\n      return this.privParameters;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"recognitionMode\", {\n    get: function () {\n      return this.privRecognitionMode;\n    },\n    set: function (value) {\n      this.privRecognitionMode = value;\n      this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\n      this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"SpeechServiceConfig\", {\n    get: function () {\n      return this.privSpeechServiceConfig;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"recognitionActivityTimeout\", {\n    get: function () {\n      return this.privRecognitionActivityTimeout;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"isContinuousRecognition\", {\n    get: function () {\n      return this.privRecognitionMode !== RecognitionMode.Interactive;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"autoDetectSourceLanguages\", {\n    get: function () {\n      return this.parameters.getProperty(Exports_1.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"maxRetryCount\", {\n    get: function () {\n      return this.privMaxRetryCount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return RecognizerConfig;\n}();\n\nexports.RecognizerConfig = RecognizerConfig; // The config is serialized and sent as the Speech.Config\n\nvar SpeechServiceConfig = function () {\n  function SpeechServiceConfig(context) {\n    var _this = this;\n\n    this.serialize = function () {\n      return JSON.stringify(_this, function (key, value) {\n        if (value && typeof value === \"object\") {\n          var replacement = {};\n\n          for (var k in value) {\n            if (Object.hasOwnProperty.call(value, k)) {\n              replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n            }\n          }\n\n          return replacement;\n        }\n\n        return value;\n      });\n    };\n\n    this.context = context;\n  }\n\n  Object.defineProperty(SpeechServiceConfig.prototype, \"Context\", {\n    get: function () {\n      return this.context;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechServiceConfig.prototype, \"Recognition\", {\n    get: function () {\n      return this.recognition;\n    },\n    set: function (value) {\n      this.recognition = value.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SpeechServiceConfig;\n}();\n\nexports.SpeechServiceConfig = SpeechServiceConfig;\n\nvar Context = function () {\n  function Context(os) {\n    this.system = new System();\n    this.os = os;\n  }\n\n  return Context;\n}();\n\nexports.Context = Context;\n\nvar System = function () {\n  function System() {\n    // Note: below will be patched for official builds.\n    var SPEECHSDK_CLIENTSDK_VERSION = \"1.18.1\";\n    this.name = \"SpeechSDK\";\n    this.version = SPEECHSDK_CLIENTSDK_VERSION;\n    this.build = \"JavaScript\";\n    this.lang = \"JavaScript\";\n  }\n\n  return System;\n}();\n\nexports.System = System;\n\nvar OS = function () {\n  function OS(platform, name, version) {\n    this.platform = platform;\n    this.name = name;\n    this.version = version;\n  }\n\n  return OS;\n}();\n\nexports.OS = OS;\n\nvar Device = function () {\n  function Device(manufacturer, model, version) {\n    this.manufacturer = manufacturer;\n    this.model = model;\n    this.version = version;\n  }\n\n  return Device;\n}();\n\nexports.Device = Device;\nvar connectivity;\n\n(function (connectivity) {\n  connectivity[\"Bluetooth\"] = \"Bluetooth\";\n  connectivity[\"Wired\"] = \"Wired\";\n  connectivity[\"WiFi\"] = \"WiFi\";\n  connectivity[\"Cellular\"] = \"Cellular\";\n  connectivity[\"InBuilt\"] = \"InBuilt\";\n  connectivity[\"Unknown\"] = \"Unknown\";\n})(connectivity = exports.connectivity || (exports.connectivity = {}));\n\nvar type;\n\n(function (type) {\n  type[\"Phone\"] = \"Phone\";\n  type[\"Speaker\"] = \"Speaker\";\n  type[\"Car\"] = \"Car\";\n  type[\"Headset\"] = \"Headset\";\n  type[\"Thermostat\"] = \"Thermostat\";\n  type[\"Microphones\"] = \"Microphones\";\n  type[\"Deskphone\"] = \"Deskphone\";\n  type[\"RemoteControl\"] = \"RemoteControl\";\n  type[\"Unknown\"] = \"Unknown\";\n  type[\"File\"] = \"File\";\n  type[\"Stream\"] = \"Stream\";\n})(type = exports.type || (exports.type = {}));","map":{"version":3,"sources":["src/common.speech/RecognizerConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode = RecognitionMode.Interactive;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n\r\n    constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n}\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize = (): string => {\r\n        return JSON.stringify(this, (key: any, value: any): any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: any = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n\r\n    constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.18.1\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n"]},"metadata":{},"sourceType":"script"}