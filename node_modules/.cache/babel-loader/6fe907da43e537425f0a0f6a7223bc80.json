{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AudioFileWriter = void 0;\n\nvar fs = __importStar(require(\"fs\"));\n\nvar Contracts_1 = require(\"../Contracts\");\n\nvar AudioFileWriter = function () {\n  function AudioFileWriter(filename) {\n    var _this = this;\n\n    this.id = function () {\n      return _this.privId;\n    };\n\n    Contracts_1.Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\n    this.privFd = fs.openSync(filename, \"w\");\n  }\n\n  Object.defineProperty(AudioFileWriter.prototype, \"format\", {\n    set: function (format) {\n      Contracts_1.Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\n      this.privAudioFormat = format;\n      var headerOffset = 0;\n\n      if (this.privAudioFormat.hasHeader) {\n        headerOffset = this.privAudioFormat.header.byteLength;\n      }\n\n      if (this.privFd !== undefined) {\n        this.privWriteStream = fs.createWriteStream(\"\", {\n          fd: this.privFd,\n          start: headerOffset,\n          autoClose: false\n        });\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AudioFileWriter.prototype.write = function (buffer) {\n    Contracts_1.Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\n\n    if (this.privWriteStream !== undefined) {\n      this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\n    }\n  };\n\n  AudioFileWriter.prototype.close = function () {\n    var _this = this;\n\n    if (this.privFd !== undefined) {\n      this.privWriteStream.on(\"finish\", function () {\n        if (_this.privAudioFormat.hasHeader) {\n          _this.privAudioFormat.updateHeader(_this.privWriteStream.bytesWritten);\n\n          fs.writeSync(_this.privFd, new Int8Array(_this.privAudioFormat.header), 0, _this.privAudioFormat.header.byteLength, 0);\n        }\n\n        fs.closeSync(_this.privFd);\n        _this.privFd = undefined;\n      });\n      this.privWriteStream.end();\n    }\n  };\n\n  return AudioFileWriter;\n}();\n\nexports.AudioFileWriter = AudioFileWriter;","map":{"version":3,"sources":["src/sdk/Audio/AudioFileWriter.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,EAAA,GAAA,YAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAIA,IAAA,eAAA,GAAA,YAAA;AAMI,WAAA,eAAA,CAAmB,QAAnB,EAAwC;AAAxC,QAAA,KAAA,GAAA,IAAA;;AA0CO,SAAA,EAAA,GAAK,YAAA;AACR,aAAO,KAAI,CAAC,MAAZ;AACH,KAFM;;AAzCH,IAAA,WAAA,CAAA,SAAA,CAAU,sBAAV,CAAiC,EAAE,CAAC,QAApC,EAA8C,8EAA9C;AACA,SAAK,MAAL,GAAc,EAAE,CAAC,QAAH,CAAY,QAAZ,EAAsB,GAAtB,CAAd;AACH;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;SAAjB,UAAkB,MAAlB,EAA2C;AACvC,MAAA,WAAA,CAAA,SAAA,CAAU,mBAAV,CAA8B,KAAK,eAAnC,EAAoD,uBAApD;AACA,WAAK,eAAL,GAAuB,MAAvB;AACA,UAAI,YAAY,GAAW,CAA3B;;AACA,UAAI,KAAK,eAAL,CAAqB,SAAzB,EAAoC;AAChC,QAAA,YAAY,GAAG,KAAK,eAAL,CAAqB,MAArB,CAA4B,UAA3C;AACH;;AACD,UAAI,KAAK,MAAL,KAAgB,SAApB,EAA+B;AAC3B,aAAK,eAAL,GAAuB,EAAE,CAAC,iBAAH,CAAqB,EAArB,EAAyB;AAAC,UAAA,EAAE,EAAE,KAAK,MAAV;AAAkB,UAAA,KAAK,EAAE,YAAzB;AAAuC,UAAA,SAAS,EAAE;AAAlD,SAAzB,CAAvB;AACH;AACJ,KAVgB;qBAAA;;AAAA,GAAjB;;AAYO,EAAA,eAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,MAAb,EAAgC;AAC5B,IAAA,WAAA,CAAA,SAAA,CAAU,sBAAV,CAAiC,KAAK,eAAtC,EAAuD,iCAAvD;;AACA,QAAI,KAAK,eAAL,KAAyB,SAA7B,EAAwC;AACpC,WAAK,eAAL,CAAqB,KAArB,CAA2B,IAAI,UAAJ,CAAe,MAAM,CAAC,KAAP,CAAa,CAAb,CAAf,CAA3B;AACH;AACJ,GALM;;AAOA,EAAA,eAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,KAAK,MAAL,KAAgB,SAApB,EAA+B;AAC3B,WAAK,eAAL,CAAqB,EAArB,CAAwB,QAAxB,EAAkC,YAAA;AAC9B,YAAI,KAAI,CAAC,eAAL,CAAqB,SAAzB,EAAoC;AAChC,UAAA,KAAI,CAAC,eAAL,CAAqB,YAArB,CAAkC,KAAI,CAAC,eAAL,CAAqB,YAAvD;;AACA,UAAA,EAAE,CAAC,SAAH,CAAa,KAAI,CAAC,MAAlB,EACI,IAAI,SAAJ,CAAc,KAAI,CAAC,eAAL,CAAqB,MAAnC,CADJ,EAEI,CAFJ,EAGI,KAAI,CAAC,eAAL,CAAqB,MAArB,CAA4B,UAHhC,EAII,CAJJ;AAKH;;AACD,QAAA,EAAE,CAAC,SAAH,CAAa,KAAI,CAAC,MAAlB;AACA,QAAA,KAAI,CAAC,MAAL,GAAc,SAAd;AACH,OAXD;AAYA,WAAK,eAAL,CAAqB,GAArB;AACH;AACJ,GAhBM;;AAqBX,SAAA,eAAA;AAAC,CAnDD,EAAA;;AAAa,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", () => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}