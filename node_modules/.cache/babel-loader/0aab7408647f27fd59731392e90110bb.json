{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BotFrameworkConfig = void 0;\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar DialogServiceConfig_1 = require(\"./DialogServiceConfig\");\n\nvar Exports_1 = require(\"./Exports\");\n/**\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\n * @class BotFrameworkConfig\n */\n\n\nvar BotFrameworkConfig = function (_super) {\n  __extends(BotFrameworkConfig, _super);\n  /**\n   * Creates an instance of BotFrameworkConfig.\n   */\n\n\n  function BotFrameworkConfig() {\n    return _super.call(this) || this;\n  }\n  /**\n   * Creates a bot framework configuration instance with the provided subscription information.\n   * @member BotFrameworkConfig.fromSubscription\n   * @function\n   * @public\n   * @param subscription Subscription key associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n   *        resource name.\n   * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n   */\n\n\n  BotFrameworkConfig.fromSubscription = function (subscription, region, botId) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var botFrameworkConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, DialogServiceConfig_1.DialogServiceConfig.DialogTypes.BotFramework);\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Key, subscription);\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Region, region);\n\n    if (botId) {\n      botFrameworkConfig.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, botId);\n    }\n\n    return botFrameworkConfig;\n  };\n  /**\n   * Creates a bot framework configuration instance for the specified authorization token and region.\n   * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\n   *       caller must refresh it by setting the authorizationToken property on the corresponding\n   *       DialogServiceConnector instance created with this config. The contents of configuration objects are copied\n   *       when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\n   *       original configuration's authorization token. Create a new configuration instance or set the\n   *       SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\n   *       further DialogServiceConnectors.\n   * @member BotFrameworkConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param authorizationToken The authorization token associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n   *        resource name.\n   * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n   */\n\n\n  BotFrameworkConfig.fromAuthorizationToken = function (authorizationToken, region, botId) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var botFrameworkConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, DialogServiceConfig_1.DialogServiceConfig.DialogTypes.BotFramework);\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Region, region);\n\n    if (botId) {\n      botFrameworkConfig.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, botId);\n    }\n\n    return botFrameworkConfig;\n  };\n  /**\n   * Creates an instance of a BotFrameworkConfig.\n   * This method is intended only for users who use a non-default service host. The standard resource path will be\n   * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n   * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n   * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\n   *       property on the created BotFrameworkConfig instance.\n   * Note: Added in version 1.15.0.\n   * @member BotFrameworkConfig.fromHost\n   * @function\n   * @public\n   * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\n   *        wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\n   *        wss://{host}.convai.speech.azure.us.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\n   *        token must be set.\n   * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n   *        resource name.\n   * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n   */\n\n\n  BotFrameworkConfig.fromHost = function (host, subscriptionKey, botId) {\n    Contracts_1.Contracts.throwIfNullOrUndefined(host, \"host\");\n    var resolvedHost = host instanceof URL ? host : new URL(\"wss://\" + host + \".convai.speech.azure.us\");\n    Contracts_1.Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\n    var botFrameworkConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, DialogServiceConfig_1.DialogServiceConfig.DialogTypes.BotFramework);\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\n\n    if (undefined !== subscriptionKey) {\n      botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n\n    return botFrameworkConfig;\n  };\n  /**\n   * Creates an instance of a BotFrameworkConfig.\n   * This method is intended only for users who use a non-standard service endpoint or parameters.\n   * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\n   * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n   *       fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\n   *       use the authorization token.\n   * Note: Added in version 1.15.0.\n   * @member BotFrameworkConfig.fromEndpoint\n   * @function\n   * @public\n   * @param {URL} endpoint - The service endpoint to connect to.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\n   *        token must be set.\n   * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\n   */\n\n\n  BotFrameworkConfig.fromEndpoint = function (endpoint, subscriptionKey) {\n    Contracts_1.Contracts.throwIfNull(endpoint, \"endpoint\");\n    var botFrameworkConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, DialogServiceConfig_1.DialogServiceConfig.DialogTypes.BotFramework);\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\n\n    if (undefined !== subscriptionKey) {\n      botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n\n    return botFrameworkConfig;\n  };\n\n  return BotFrameworkConfig;\n}(DialogServiceConfig_1.DialogServiceConfigImpl);\n\nexports.BotFrameworkConfig = BotFrameworkConfig;","map":{"version":3,"sources":["src/sdk/BotFrameworkConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     *        resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     *       caller must refresh it by setting the authorizationToken property on the corresponding\r\n     *       DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     *       when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     *       original configuration's authorization token. Create a new configuration instance or set the\r\n     *       SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     *       further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     *        resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     *       property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     *        wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     *        wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     *        token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     *        resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     *       use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     *        token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}