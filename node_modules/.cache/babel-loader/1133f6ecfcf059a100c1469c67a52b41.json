{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranslationServiceRecognizer = void 0;\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar Exports_3 = require(\"./Exports\"); // tslint:disable-next-line:max-classes-per-file\n\n\nvar TranslationServiceRecognizer = function (_super) {\n  __extends(TranslationServiceRecognizer, _super);\n\n  function TranslationServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) {\n    var _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) || this;\n\n    _this.privTranslationRecognizer = translationRecognizer;\n\n    _this.connectionEvents.attach(function (connectionEvent) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(connectionEvent.name === \"ConnectionEstablishedEvent\")) return [3\n              /*break*/\n              , 1];\n              this.privTranslationRecognizer.onConnection();\n              return [3\n              /*break*/\n              , 3];\n\n            case 1:\n              if (!(connectionEvent.name === \"ConnectionClosedEvent\")) return [3\n              /*break*/\n              , 3];\n              return [4\n              /*yield*/\n              , this.privTranslationRecognizer.onDisconnection()];\n\n            case 2:\n              _a.sent();\n\n              _a.label = 3;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  TranslationServiceRecognizer.prototype.processTypeSpecificMessages = function (connectionMessage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resultProps, processed, _a, result, translatedPhrase, result_1, reason, result_2, cancelReason, ev, synthEnd, result_3, retEvent, canceledResult;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            resultProps = new Exports_2.PropertyCollection();\n            processed = false;\n\n            if (connectionMessage.messageType === Exports_1.MessageType.Text) {\n              resultProps.setProperty(Exports_2.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n            }\n\n            _a = connectionMessage.path.toLowerCase();\n\n            switch (_a) {\n              case \"translation.hypothesis\":\n                return [3\n                /*break*/\n                , 1];\n\n              case \"translation.phrase\":\n                return [3\n                /*break*/\n                , 2];\n\n              case \"translation.synthesis\":\n                return [3\n                /*break*/\n                , 7];\n\n              case \"translation.synthesis.end\":\n                return [3\n                /*break*/\n                , 8];\n            }\n\n            return [3\n            /*break*/\n            , 9];\n\n          case 1:\n            result = this.fireEventForResult(Exports_3.TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\n            this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\n\n            if (!!this.privTranslationRecognizer.recognizing) {\n              try {\n                this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            }\n\n            processed = true;\n            return [3\n            /*break*/\n            , 10];\n\n          case 2:\n            translatedPhrase = Exports_3.TranslationPhrase.fromJSON(connectionMessage.textBody);\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\n            if (!(translatedPhrase.RecognitionStatus === Exports_3.RecognitionStatus.Success)) return [3\n            /*break*/\n            , 3];\n            result_1 = this.fireEventForResult(translatedPhrase, resultProps);\n\n            if (!!this.privTranslationRecognizer.recognized) {\n              try {\n                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result_1);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            } // report result to promise.\n\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result_1.result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n\n            return [3\n            /*break*/\n            , 10];\n\n          case 3:\n            reason = Exports_3.EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\n            result_2 = new Exports_2.TranslationRecognitionResult(undefined, this.privRequestSession.requestId, reason, translatedPhrase.Text, translatedPhrase.Duration, this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset, undefined, connectionMessage.textBody, resultProps);\n            if (!(reason === Exports_2.ResultReason.Canceled)) return [3\n            /*break*/\n            , 5];\n            cancelReason = Exports_3.EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\n            return [4\n            /*yield*/\n            , this.cancelRecognitionLocal(cancelReason, Exports_3.EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus), undefined)];\n\n          case 4:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            if (!(this.privRequestSession.isSpeechEnded && reason === Exports_2.ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== Exports_3.RecognitionStatus.InitialSilenceTimeout)) {\n              ev = new Exports_2.TranslationRecognitionEventArgs(result_2, result_2.offset, this.privRequestSession.sessionId);\n\n              if (!!this.privTranslationRecognizer.recognized) {\n                try {\n                  this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            } // report result to promise.\n\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result_2);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n\n            _b.label = 6;\n\n          case 6:\n            processed = true;\n            return [3\n            /*break*/\n            , 10];\n\n          case 7:\n            this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\n            processed = true;\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            synthEnd = Exports_3.TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\n\n            switch (synthEnd.SynthesisStatus) {\n              case Exports_3.SynthesisStatus.Error:\n                if (!!this.privTranslationRecognizer.synthesizing) {\n                  result_3 = new Exports_2.TranslationSynthesisResult(Exports_2.ResultReason.Canceled, undefined);\n                  retEvent = new Exports_2.TranslationSynthesisEventArgs(result_3, this.privRequestSession.sessionId);\n\n                  try {\n                    this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                    /* tslint:disable:no-empty */\n                  } catch (error) {// Not going to let errors in the event handler\n                    // trip things up.\n                  }\n                }\n\n                if (!!this.privTranslationRecognizer.canceled) {\n                  canceledResult = new Exports_2.TranslationRecognitionCanceledEventArgs(this.privRequestSession.sessionId, Exports_2.CancellationReason.Error, synthEnd.FailureReason, Exports_2.CancellationErrorCode.ServiceError, null);\n\n                  try {\n                    this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\n                    /* tslint:disable:no-empty */\n                  } catch (error) {// Not going to let errors in the event handler\n                    // trip things up.\n                  }\n                }\n\n                break;\n\n              case Exports_3.SynthesisStatus.Success:\n                this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\n                break;\n\n              default:\n                break;\n            }\n\n            processed = true;\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            return [3\n            /*break*/\n            , 10];\n\n          case 10:\n            return [2\n            /*return*/\n            , processed];\n        }\n      });\n    });\n  }; // Cancels recognition.\n\n\n  TranslationServiceRecognizer.prototype.cancelRecognition = function (sessionId, requestId, cancellationReason, errorCode, error) {\n    var properties = new Exports_2.PropertyCollection();\n    properties.setProperty(Exports_3.CancellationErrorCodePropertyName, Exports_2.CancellationErrorCode[errorCode]);\n\n    if (!!this.privTranslationRecognizer.canceled) {\n      var cancelEvent = new Exports_2.TranslationRecognitionCanceledEventArgs(sessionId, cancellationReason, error, errorCode, undefined);\n\n      try {\n        this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      var result = new Exports_2.TranslationRecognitionResult(undefined, // Translations\n      requestId, Exports_2.ResultReason.Canceled, undefined, // Text\n      undefined, // Druation\n      undefined, // Offset\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        /* tslint:disable:no-empty */\n\n        this.privSuccessCallback = undefined;\n      } catch (_b) {}\n    }\n  };\n\n  TranslationServiceRecognizer.prototype.fireEventForResult = function (serviceResult, properties) {\n    var translations;\n\n    if (undefined !== serviceResult.Translation.Translations) {\n      translations = new Exports_2.Translations();\n\n      for (var _i = 0, _a = serviceResult.Translation.Translations; _i < _a.length; _i++) {\n        var translation = _a[_i];\n        translations.set(translation.Language, translation.Text);\n      }\n    }\n\n    var resultReason;\n\n    if (serviceResult instanceof Exports_3.TranslationPhrase) {\n      if (serviceResult.Translation.TranslationStatus === Exports_1.TranslationStatus.Success) {\n        resultReason = Exports_2.ResultReason.TranslatedSpeech;\n      } else {\n        resultReason = Exports_2.ResultReason.RecognizedSpeech;\n      }\n    } else {\n      resultReason = Exports_2.ResultReason.TranslatingSpeech;\n    }\n\n    var offset = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\n    var result = new Exports_2.TranslationRecognitionResult(translations, this.privRequestSession.requestId, resultReason, serviceResult.Text, serviceResult.Duration, offset, serviceResult.Translation.FailureReason, JSON.stringify(serviceResult), properties);\n    var ev = new Exports_2.TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\n    return ev;\n  };\n\n  TranslationServiceRecognizer.prototype.sendSynthesisAudio = function (audio, sessionId) {\n    var reason = undefined === audio ? Exports_2.ResultReason.SynthesizingAudioCompleted : Exports_2.ResultReason.SynthesizingAudio;\n    var result = new Exports_2.TranslationSynthesisResult(reason, audio);\n    var retEvent = new Exports_2.TranslationSynthesisEventArgs(result, sessionId);\n\n    if (!!this.privTranslationRecognizer.synthesizing) {\n      try {\n        this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n        /* tslint:disable:no-empty */\n      } catch (error) {// Not going to let errors in the event handler\n        // trip things up.\n      }\n    }\n  };\n\n  return TranslationServiceRecognizer;\n}(Exports_3.ServiceRecognizerBase);\n\nexports.TranslationServiceRecognizer = TranslationServiceRecognizer;","map":{"version":3,"sources":["src/common.speech/TranslationServiceRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach(async (connectionEvent: ConnectionEvent): Promise<void> => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                await this.privTranslationRecognizer.onDisconnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = false;\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n                if (!!this.privTranslationRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"translation.phrase\":\r\n                const translatedPhrase: TranslationPhrase = TranslationPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n                if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                    // OK, the recognition was successful. How'd the translation do?\r\n                    const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                    if (!!this.privTranslationRecognizer.recognized) {\r\n                        try {\r\n                            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result.result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n\r\n                    break;\r\n                } else {\r\n                    const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                    const result = new TranslationRecognitionResult(\r\n                        undefined,\r\n                        this.privRequestSession.requestId,\r\n                        reason,\r\n                        translatedPhrase.Text,\r\n                        translatedPhrase.Duration,\r\n                        this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                        undefined,\r\n                        connectionMessage.textBody,\r\n                        resultProps);\r\n\r\n                    if (reason === ResultReason.Canceled) {\r\n                        const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n\r\n                        await this.cancelRecognitionLocal(\r\n                            cancelReason,\r\n                            EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus),\r\n                            undefined);\r\n                    } else {\r\n                        if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                            const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                            if (!!this.privTranslationRecognizer.recognized) {\r\n                                try {\r\n                                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                    /* tslint:disable:no-empty */\r\n                                } catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // report result to promise.\r\n                        if (!!this.privSuccessCallback) {\r\n                            try {\r\n                                this.privSuccessCallback(result);\r\n                            } catch (e) {\r\n                                if (!!this.privErrorCallback) {\r\n                                    this.privErrorCallback(e);\r\n                                }\r\n                            }\r\n                            // Only invoke the call back once.\r\n                            // and if it's successful don't invoke the\r\n                            // error after that.\r\n                            this.privSuccessCallback = undefined;\r\n                            this.privErrorCallback = undefined;\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}