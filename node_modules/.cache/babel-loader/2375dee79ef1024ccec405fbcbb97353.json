{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stream = void 0;\n\nvar Error_1 = require(\"./Error\");\n\nvar Guid_1 = require(\"./Guid\");\n\nvar Queue_1 = require(\"./Queue\");\n\nvar Stream = function () {\n  function Stream(streamId) {\n    var _this = this;\n\n    this.privIsWriteEnded = false;\n    this.privIsReadEnded = false;\n\n    this.read = function () {\n      if (_this.privIsReadEnded) {\n        throw new Error_1.InvalidOperationError(\"Stream read has already finished\");\n      }\n\n      return _this.privReaderQueue.dequeue().then(function (streamChunk) {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!(streamChunk === undefined || streamChunk.isEnd)) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , this.privReaderQueue.dispose(\"End of stream reached\")];\n\n              case 1:\n                _a.sent();\n\n                _a.label = 2;\n\n              case 2:\n                return [2\n                /*return*/\n                , streamChunk];\n            }\n          });\n        });\n      });\n    };\n\n    this.readEnded = function () {\n      if (!_this.privIsReadEnded) {\n        _this.privIsReadEnded = true;\n        _this.privReaderQueue = new Queue_1.Queue();\n      }\n    };\n\n    this.throwIfClosed = function () {\n      if (_this.privIsWriteEnded) {\n        throw new Error_1.InvalidOperationError(\"Stream closed\");\n      }\n    };\n\n    this.privId = streamId ? streamId : Guid_1.createNoDashGuid();\n    this.privReaderQueue = new Queue_1.Queue();\n  }\n\n  Object.defineProperty(Stream.prototype, \"isClosed\", {\n    get: function () {\n      return this.privIsWriteEnded;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Stream.prototype, \"isReadEnded\", {\n    get: function () {\n      return this.privIsReadEnded;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Stream.prototype, \"id\", {\n    get: function () {\n      return this.privId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Stream.prototype.close = function () {\n    if (!this.privIsWriteEnded) {\n      this.writeStreamChunk({\n        buffer: null,\n        isEnd: true,\n        timeReceived: Date.now()\n      });\n      this.privIsWriteEnded = true;\n    }\n  };\n\n  Stream.prototype.writeStreamChunk = function (streamChunk) {\n    this.throwIfClosed();\n\n    if (!this.privReaderQueue.isDisposed()) {\n      try {\n        this.privReaderQueue.enqueue(streamChunk);\n      } catch (e) {// Do nothing\n      }\n    }\n  };\n\n  return Stream;\n}();\n\nexports.Stream = Stream;","map":{"version":3,"sources":["src/common/Stream.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAQA,IAAA,MAAA,GAAA,YAAA;AAMI,WAAA,MAAA,CAAmB,QAAnB,EAAoC;AAApC,QAAA,KAAA,GAAA,IAAA;;AAJQ,SAAA,gBAAA,GAA4B,KAA5B;AACA,SAAA,eAAA,GAA2B,KAA3B;;AA0CD,SAAA,IAAA,GAAO,YAAA;AACV,UAAI,KAAI,CAAC,eAAT,EAA0B;AACtB,cAAM,IAAI,OAAA,CAAA,qBAAJ,CAA0B,kCAA1B,CAAN;AACH;;AAED,aAAO,KAAI,CAAC,eAAL,CACF,OADE,GAEF,IAFE,CAEG,UAAO,WAAP,EAAyC;AAAA,eAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;oBACvC,EAAA,WAAW,KAAK,SAAhB,IAA6B,WAAW,CAAC,KAAzC,C,EAAA,OAAA,CAAA;AAAA;AAAA,kBAAA,CAAA,CAAA;AACA,uBAAA,CAAA;AAAA;AAAA,kBAAM,KAAK,eAAL,CAAqB,OAArB,CAA6B,uBAA7B,CAAN,CAAA;;;AAAA,gBAAA,EAAA,CAAA,IAAA;;;;;AAGJ,uBAAA,CAAA;AAAA;AAAA,kBAAO,WAAP,CAAA;;;SAL2C,CAAA;AAM9C,OARE,CAAP;AASH,KAdM;;AAeA,SAAA,SAAA,GAAY,YAAA;AACf,UAAI,CAAC,KAAI,CAAC,eAAV,EAA2B;AACvB,QAAA,KAAI,CAAC,eAAL,GAAuB,IAAvB;AACA,QAAA,KAAI,CAAC,eAAL,GAAuB,IAAI,OAAA,CAAA,KAAJ,EAAvB;AACH;AACJ,KALM;;AAOC,SAAA,aAAA,GAAgB,YAAA;AACpB,UAAI,KAAI,CAAC,gBAAT,EAA2B;AACvB,cAAM,IAAI,OAAA,CAAA,qBAAJ,CAA0B,eAA1B,CAAN;AACH;AACJ,KAJO;;AA5DJ,SAAK,MAAL,GAAc,QAAQ,GAAG,QAAH,GAAc,MAAA,CAAA,gBAAA,EAApC;AACA,SAAK,eAAL,GAAuB,IAAI,OAAA,CAAA,KAAJ,EAAvB;AACH;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,MAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;SAAnB,YAAA;AACI,aAAO,KAAK,gBAAZ;AACH,KAFkB;qBAAA;;AAAA,GAAnB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,MAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;SAAtB,YAAA;AACI,aAAO,KAAK,eAAZ;AACH,KAFqB;qBAAA;;AAAA,GAAtB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,MAAA,CAAA,SAAX,EAAW,IAAX,EAAa;SAAb,YAAA;AACI,aAAO,KAAK,MAAZ;AACH,KAFY;qBAAA;;AAAA,GAAb;;AAIO,EAAA,MAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACI,QAAI,CAAC,KAAK,gBAAV,EAA4B;AACxB,WAAK,gBAAL,CAAsB;AAClB,QAAA,MAAM,EAAE,IADU;AAElB,QAAA,KAAK,EAAE,IAFW;AAGlB,QAAA,YAAY,EAAE,IAAI,CAAC,GAAL;AAHI,OAAtB;AAKA,WAAK,gBAAL,GAAwB,IAAxB;AACH;AACJ,GATM;;AAWA,EAAA,MAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,WAAxB,EAA0D;AACtD,SAAK,aAAL;;AACA,QAAI,CAAC,KAAK,eAAL,CAAqB,UAArB,EAAL,EAAwC;AACpC,UAAI;AACA,aAAK,eAAL,CAAqB,OAArB,CAA6B,WAA7B;AACH,OAFD,CAEE,OAAO,CAAP,EAAU,CACR;AACH;AACJ;AACJ,GATM;;AAsCX,SAAA,MAAA;AAAC,CAxED,EAAA;;AAAa,OAAA,CAAA,MAAA,GAAA,MAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { Queue } from \"./Queue\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read = (): Promise<IStreamChunk<TBuffer>> => {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>) => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded = (): void => {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed = (): void => {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}