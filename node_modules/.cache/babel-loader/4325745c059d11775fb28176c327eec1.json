{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RestMessageAdapter = exports.RestRequestType = void 0;\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar bent_1 = __importDefault(require(\"bent\"));\n\nvar RestRequestType;\n\n(function (RestRequestType) {\n  RestRequestType[\"Get\"] = \"GET\";\n  RestRequestType[\"Post\"] = \"POST\";\n  RestRequestType[\"Delete\"] = \"DELETE\";\n  RestRequestType[\"File\"] = \"file\";\n})(RestRequestType = exports.RestRequestType || (exports.RestRequestType = {})); // accept rest operations via request method and return abstracted objects from server response\n\n\nvar RestMessageAdapter = function () {\n  function RestMessageAdapter(configParams) {\n    if (!configParams) {\n      throw new Exports_1.ArgumentNullError(\"configParams\");\n    }\n\n    this.privHeaders = configParams.headers;\n    this.privIgnoreCache = configParams.ignoreCache;\n  }\n\n  RestMessageAdapter.extractHeaderValue = function (headerKey, headers) {\n    var headerValue = \"\";\n\n    try {\n      var arr = headers.trim().split(/[\\r\\n]+/);\n      var headerMap_1 = {};\n      arr.forEach(function (line) {\n        var parts = line.split(\": \");\n        var header = parts.shift().toLowerCase();\n        var value = parts.join(\": \");\n        headerMap_1[header] = value;\n      });\n      headerValue = headerMap_1[headerKey.toLowerCase()];\n    } catch (e) {// ignore the error\n    }\n\n    return headerValue;\n  };\n\n  Object.defineProperty(RestMessageAdapter.prototype, \"options\", {\n    set: function (configParams) {\n      this.privHeaders = configParams.headers;\n      this.privIgnoreCache = configParams.ignoreCache;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  RestMessageAdapter.prototype.setHeaders = function (key, value) {\n    this.privHeaders[key] = value;\n  };\n\n  RestMessageAdapter.prototype.request = function (method, uri, queryParams, body, binaryBody) {\n    var _this = this;\n\n    if (queryParams === void 0) {\n      queryParams = {};\n    }\n\n    if (body === void 0) {\n      body = null;\n    }\n\n    if (binaryBody === void 0) {\n      binaryBody = null;\n    }\n\n    var responseReceivedDeferral = new Exports_1.Deferred();\n    var requestCommand = method === RestRequestType.File ? \"POST\" : method;\n\n    var handleRestResponse = function (data, j) {\n      if (j === void 0) {\n        j = {};\n      }\n\n      var d = data;\n      return {\n        data: JSON.stringify(j),\n        headers: JSON.stringify(data.headers),\n        json: j,\n        ok: data.statusCode >= 200 && data.statusCode < 300,\n        status: data.statusCode,\n        statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\n      };\n    };\n\n    var blobToArrayBuffer = function (blob) {\n      var reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n      return new Promise(function (resolve) {\n        reader.onloadend = function () {\n          resolve(reader.result);\n        };\n      });\n    };\n\n    var send = function (postData) {\n      var sendRequest = bent_1.default(uri, requestCommand, _this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\n      var params = _this.queryParams(queryParams) === \"\" ? \"\" : \"?\" + _this.queryParams(queryParams);\n      sendRequest(params, postData).then(function (data) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var j;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!(method === RestRequestType.Delete || data.statusCode === 204)) return [3\n                /*break*/\n                , 1]; // No JSON from Delete and reset (204) operations\n\n                responseReceivedDeferral.resolve(handleRestResponse(data));\n                return [3\n                /*break*/\n                , 3];\n\n              case 1:\n                return [4\n                /*yield*/\n                , data.json()];\n\n              case 2:\n                j = _a.sent();\n                responseReceivedDeferral.resolve(handleRestResponse(data, j));\n                _a.label = 3;\n\n              case 3:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }).catch(function (error) {\n        responseReceivedDeferral.reject(error);\n      });\n    };\n\n    if (this.privIgnoreCache) {\n      this.privHeaders[\"Cache-Control\"] = \"no-cache\";\n    }\n\n    if (method === RestRequestType.File && binaryBody) {\n      var contentType = \"multipart/form-data\";\n      this.privHeaders[\"content-type\"] = contentType;\n      this.privHeaders[\"Content-Type\"] = contentType;\n\n      if (typeof Blob !== \"undefined\" && binaryBody instanceof Blob) {\n        blobToArrayBuffer(binaryBody).then(function (res) {\n          send(res);\n        }).catch(function (error) {\n          responseReceivedDeferral.reject(error);\n        });\n      } else {\n        send(binaryBody);\n      }\n    } else {\n      if (method === RestRequestType.Post && body) {\n        this.privHeaders[\"content-type\"] = \"application/json\";\n        this.privHeaders[\"Content-Type\"] = \"application/json\";\n      }\n\n      send(body);\n    }\n\n    return responseReceivedDeferral.promise;\n  };\n\n  RestMessageAdapter.prototype.withQuery = function (url, params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    var queryString = this.queryParams(params);\n    return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\n  };\n\n  RestMessageAdapter.prototype.queryParams = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return Object.keys(params).map(function (k) {\n      return encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]);\n    }).join(\"&\");\n  };\n\n  return RestMessageAdapter;\n}();\n\nexports.RestMessageAdapter = RestMessageAdapter;","map":{"version":3,"sources":["src/common.browser/RestMessageAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\nimport bent, { BentResponse } from \"bent\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string; };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: any = {};\r\n            arr.forEach((line: any) => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string ): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: any = {},\r\n        body: any = null,\r\n        binaryBody: Blob | Buffer = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: any = {}): IRestResponse => {\r\n            const d: { statusText?: string, statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const blobToArrayBuffer = (blob: Blob) => {\r\n            const reader = new FileReader();\r\n            reader.readAsArrayBuffer(blob);\r\n            return new Promise((resolve: (value: unknown) => void) => {\r\n                reader.onloadend = () => {\r\n                resolve(reader.result);\r\n                };\r\n            });\r\n        };\r\n\r\n        const send = (postData: any): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : \"?\" + this.queryParams(queryParams);\r\n            sendRequest(params, postData).then( async (data: any) => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    const j: any = await data.json();\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                }\r\n            }).catch((error: string) => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.File && binaryBody) {\r\n            const contentType = \"multipart/form-data\";\r\n            this.privHeaders[\"content-type\"] = contentType;\r\n            this.privHeaders[\"Content-Type\"] = contentType;\r\n            if (typeof (Blob) !== \"undefined\" && binaryBody instanceof Blob) {\r\n                blobToArrayBuffer(binaryBody as Blob).then( (res: any) => {\r\n                    send(res);\r\n                }).catch((error: any) => {\r\n                    responseReceivedDeferral.reject(error);\r\n                });\r\n            } else {\r\n                send(binaryBody as Buffer);\r\n            }\r\n        } else {\r\n            if (method === RestRequestType.Post && body) {\r\n                this.privHeaders[\"content-type\"] = \"application/json\";\r\n                this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n            }\r\n            send(body);\r\n        }\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private withQuery(url: string, params: any = {}): any {\r\n        const queryString = this.queryParams(params);\r\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n    }\r\n\r\n    private queryParams(params: any = {}): any {\r\n        return Object.keys(params)\r\n            .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}