{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DialogConnectionFactory = void 0;\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../common.speech/Exports\");\n\nvar Exports_3 = require(\"../sdk/Exports\");\n\nvar ConnectionFactoryBase_1 = require(\"./ConnectionFactoryBase\");\n\nvar Exports_4 = require(\"./Exports\");\n\nvar HeaderNames_1 = require(\"./HeaderNames\");\n\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\n\nvar DialogConnectionFactory = function (_super) {\n  __extends(DialogConnectionFactory, _super);\n\n  function DialogConnectionFactory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.create = function (config, authInfo, connectionId) {\n      var applicationId = config.parameters.getProperty(Exports_3.PropertyId.Conversation_ApplicationId, \"\");\n      var dialogType = config.parameters.getProperty(Exports_3.PropertyId.Conversation_DialogType);\n      var region = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Region);\n      var language = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\n      var requestTurnStatus = config.parameters.getProperty(Exports_3.PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\n      var queryParams = {};\n      queryParams[HeaderNames_1.HeaderNames.ConnectionId] = connectionId;\n      queryParams[QueryParameterNames_1.QueryParameterNames.Format] = config.parameters.getProperty(Exports_2.OutputFormatPropertyName, Exports_3.OutputFormat[Exports_3.OutputFormat.Simple]).toLowerCase();\n      queryParams[QueryParameterNames_1.QueryParameterNames.Language] = language;\n      queryParams[QueryParameterNames_1.QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\n\n      if (applicationId) {\n        queryParams[QueryParameterNames_1.QueryParameterNames.BotId] = applicationId;\n\n        if (dialogType === Exports_3.DialogServiceConfig.DialogTypes.CustomCommands) {\n          queryParams[HeaderNames_1.HeaderNames.CustomCommandsAppId] = applicationId;\n        }\n      }\n\n      var resourceInfix = dialogType === Exports_3.DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\" : \"\";\n      var version = dialogType === Exports_3.DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\" : dialogType === Exports_3.DialogServiceConfig.DialogTypes.BotFramework ? \"v3\" : \"v0\";\n      var headers = {};\n\n      if (authInfo.token != null && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      } // The URL used for connection is chosen in a priority order of specification:\n      //  1. If a custom endpoint is provided, that URL is used verbatim.\n      //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\n      //  3. If no custom connection details are provided, a URL is constructed from default values.\n\n\n      var endpoint = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Endpoint, \"\");\n\n      if (!endpoint) {\n        var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n        var host = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + DialogConnectionFactory.Constants.BaseUrl + hostSuffix);\n        var standardizedHost = host.endsWith(\"/\") ? host : host + \"/\";\n        endpoint = \"\" + standardizedHost + resourceInfix + DialogConnectionFactory.Constants.ApiKey + \"/\" + version;\n      }\n\n      _this.setCommonUrlParams(config, queryParams, endpoint);\n\n      var enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_4.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n\n    return _this;\n  }\n\n  var _a;\n\n  DialogConnectionFactory.Constants = (_a = function () {\n    function class_1() {}\n\n    return class_1;\n  }(), _a.ApiKey = \"api\", _a.BaseUrl = \"convai.speech\", _a);\n  return DialogConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase);\n\nexports.DialogConnectionFactory = DialogConnectionFactory;","map":{"version":3,"sources":["src/common.speech/DialogConnectorFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static Constants: any = class {\r\n        private static ApiKey: string = \"api\";\r\n        private static BaseUrl: string = \"convai.speech\";\r\n    };\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.Constants.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.Constants.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}