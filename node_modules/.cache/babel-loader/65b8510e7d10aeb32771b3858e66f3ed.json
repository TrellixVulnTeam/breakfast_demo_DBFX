{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechConnectionMessage = void 0;\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar HeaderNames_1 = require(\"./HeaderNames\");\n\nvar SpeechConnectionMessage = function (_super) {\n  __extends(SpeechConnectionMessage, _super);\n\n  function SpeechConnectionMessage(messageType, path, requestId, contentType, body, streamId, additionalHeaders, id) {\n    var _this = this;\n\n    if (!path) {\n      throw new Exports_1.ArgumentNullError(\"path\");\n    }\n\n    if (!requestId) {\n      throw new Exports_1.ArgumentNullError(\"requestId\");\n    }\n\n    var headers = {};\n    headers[HeaderNames_1.HeaderNames.Path] = path;\n    headers[HeaderNames_1.HeaderNames.RequestId] = requestId;\n    headers[HeaderNames_1.HeaderNames.RequestTimestamp] = new Date().toISOString();\n\n    if (contentType) {\n      headers[HeaderNames_1.HeaderNames.ContentType] = contentType;\n    }\n\n    if (streamId) {\n      headers[HeaderNames_1.HeaderNames.RequestStreamId] = streamId;\n    }\n\n    if (additionalHeaders) {\n      for (var headerName in additionalHeaders) {\n        if (headerName) {\n          headers[headerName] = additionalHeaders[headerName];\n        }\n      }\n    }\n\n    if (id) {\n      _this = _super.call(this, messageType, body, headers, id) || this;\n    } else {\n      _this = _super.call(this, messageType, body, headers) || this;\n    }\n\n    _this.privPath = path;\n    _this.privRequestId = requestId;\n    _this.privContentType = contentType;\n    _this.privStreamId = streamId;\n    _this.privAdditionalHeaders = additionalHeaders;\n    return _this;\n  }\n\n  Object.defineProperty(SpeechConnectionMessage.prototype, \"path\", {\n    get: function () {\n      return this.privPath;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConnectionMessage.prototype, \"requestId\", {\n    get: function () {\n      return this.privRequestId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConnectionMessage.prototype, \"contentType\", {\n    get: function () {\n      return this.privContentType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConnectionMessage.prototype, \"streamId\", {\n    get: function () {\n      return this.privStreamId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConnectionMessage.prototype, \"additionalHeaders\", {\n    get: function () {\n      return this.privAdditionalHeaders;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SpeechConnectionMessage.fromConnectionMessage = function (message) {\n    var path = null;\n    var requestId = null;\n    var contentType = null;\n    var requestTimestamp = null;\n    var streamId = null;\n    var additionalHeaders = {};\n\n    if (message.headers) {\n      for (var headerName in message.headers) {\n        if (headerName) {\n          if (headerName.toLowerCase() === HeaderNames_1.HeaderNames.Path.toLowerCase()) {\n            path = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames_1.HeaderNames.RequestId.toLowerCase()) {\n            requestId = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames_1.HeaderNames.RequestTimestamp.toLowerCase()) {\n            requestTimestamp = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames_1.HeaderNames.ContentType.toLowerCase()) {\n            contentType = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames_1.HeaderNames.RequestStreamId.toLowerCase()) {\n            streamId = message.headers[headerName];\n          } else {\n            additionalHeaders[headerName] = message.headers[headerName];\n          }\n        }\n      }\n    }\n\n    return new SpeechConnectionMessage(message.messageType, path, requestId, contentType, message.body, streamId, additionalHeaders, message.id);\n  };\n\n  return SpeechConnectionMessage;\n}(Exports_1.ConnectionMessage);\n\nexports.SpeechConnectionMessage = SpeechConnectionMessage;","map":{"version":3,"sources":["src/common.speech/SpeechConnectionMessage.Internal.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAA,uBAAA,GAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA;;AAQzC,WAAA,uBAAA,CACI,WADJ,EAEI,IAFJ,EAGI,SAHJ,EAII,WAJJ,EAKI,IALJ,EAMI,QANJ,EAOI,iBAPJ,EAQI,EARJ,EAQe;AARf,QAAA,KAAA,GAAA,IAAA;;AAUI,QAAI,CAAC,IAAL,EAAW;AACP,YAAM,IAAI,SAAA,CAAA,iBAAJ,CAAsB,MAAtB,CAAN;AACH;;AAED,QAAI,CAAC,SAAL,EAAgB;AACZ,YAAM,IAAI,SAAA,CAAA,iBAAJ,CAAsB,WAAtB,CAAN;AACH;;AAED,QAAM,OAAO,GAA8B,EAA3C;AACA,IAAA,OAAO,CAAC,aAAA,CAAA,WAAA,CAAY,IAAb,CAAP,GAA4B,IAA5B;AACA,IAAA,OAAO,CAAC,aAAA,CAAA,WAAA,CAAY,SAAb,CAAP,GAAiC,SAAjC;AACA,IAAA,OAAO,CAAC,aAAA,CAAA,WAAA,CAAY,gBAAb,CAAP,GAAwC,IAAI,IAAJ,GAAW,WAAX,EAAxC;;AACA,QAAI,WAAJ,EAAiB;AACb,MAAA,OAAO,CAAC,aAAA,CAAA,WAAA,CAAY,WAAb,CAAP,GAAmC,WAAnC;AACH;;AAED,QAAI,QAAJ,EAAc;AACV,MAAA,OAAO,CAAC,aAAA,CAAA,WAAA,CAAY,eAAb,CAAP,GAAuC,QAAvC;AACH;;AAED,QAAI,iBAAJ,EAAuB;AACnB,WAAK,IAAM,UAAX,IAAyB,iBAAzB,EAA4C;AACxC,YAAI,UAAJ,EAAgB;AACZ,UAAA,OAAO,CAAC,UAAD,CAAP,GAAsB,iBAAiB,CAAC,UAAD,CAAvC;AACH;AAEJ;AACJ;;AAED,QAAI,EAAJ,EAAQ;AACJ,MAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN,EAAmB,IAAnB,EAAyB,OAAzB,EAAkC,EAAlC,KAAqC,IAArC;AACH,KAFD,MAEO;AACH,MAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN,EAAmB,IAAnB,EAAyB,OAAzB,KAAiC,IAAjC;AACH;;AAED,IAAA,KAAI,CAAC,QAAL,GAAgB,IAAhB;AACA,IAAA,KAAI,CAAC,aAAL,GAAqB,SAArB;AACA,IAAA,KAAI,CAAC,eAAL,GAAuB,WAAvB;AACA,IAAA,KAAI,CAAC,YAAL,GAAoB,QAApB;AACA,IAAA,KAAI,CAAC,qBAAL,GAA6B,iBAA7B;;AACH;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,uBAAA,CAAA,SAAX,EAAW,MAAX,EAAe;SAAf,YAAA;AACI,aAAO,KAAK,QAAZ;AACH,KAFc;qBAAA;;AAAA,GAAf;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,uBAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;SAApB,YAAA;AACI,aAAO,KAAK,aAAZ;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,uBAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;SAAtB,YAAA;AACI,aAAO,KAAK,eAAZ;AACH,KAFqB;qBAAA;;AAAA,GAAtB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,uBAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;SAAnB,YAAA;AACI,aAAO,KAAK,YAAZ;AACH,KAFkB;qBAAA;;AAAA,GAAnB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,uBAAA,CAAA,SAAX,EAAW,mBAAX,EAA4B;SAA5B,YAAA;AACI,aAAO,KAAK,qBAAZ;AACH,KAF2B;qBAAA;;AAAA,GAA5B;;AAIc,EAAA,uBAAA,CAAA,qBAAA,GAAwB,UAAC,OAAD,EAA2B;AAC7D,QAAI,IAAI,GAAG,IAAX;AACA,QAAI,SAAS,GAAG,IAAhB;AACA,QAAI,WAAW,GAAG,IAAlB;AACA,QAAI,gBAAgB,GAAG,IAAvB;AACA,QAAI,QAAQ,GAAG,IAAf;AACA,QAAM,iBAAiB,GAA8B,EAArD;;AAEA,QAAI,OAAO,CAAC,OAAZ,EAAqB;AACjB,WAAK,IAAM,UAAX,IAAyB,OAAO,CAAC,OAAjC,EAA0C;AACtC,YAAI,UAAJ,EAAgB;AACZ,cAAI,UAAU,CAAC,WAAX,OAA6B,aAAA,CAAA,WAAA,CAAY,IAAZ,CAAiB,WAAjB,EAAjC,EAAiE;AAC7D,YAAA,IAAI,GAAG,OAAO,CAAC,OAAR,CAAgB,UAAhB,CAAP;AACH,WAFD,MAEO,IAAI,UAAU,CAAC,WAAX,OAA6B,aAAA,CAAA,WAAA,CAAY,SAAZ,CAAsB,WAAtB,EAAjC,EAAsE;AACzE,YAAA,SAAS,GAAG,OAAO,CAAC,OAAR,CAAgB,UAAhB,CAAZ;AACH,WAFM,MAEA,IAAI,UAAU,CAAC,WAAX,OAA6B,aAAA,CAAA,WAAA,CAAY,gBAAZ,CAA6B,WAA7B,EAAjC,EAA6E;AAChF,YAAA,gBAAgB,GAAG,OAAO,CAAC,OAAR,CAAgB,UAAhB,CAAnB;AACH,WAFM,MAEA,IAAI,UAAU,CAAC,WAAX,OAA6B,aAAA,CAAA,WAAA,CAAY,WAAZ,CAAwB,WAAxB,EAAjC,EAAwE;AAC3E,YAAA,WAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,UAAhB,CAAd;AACH,WAFM,MAEA,IAAI,UAAU,CAAC,WAAX,OAA6B,aAAA,CAAA,WAAA,CAAY,eAAZ,CAA4B,WAA5B,EAAjC,EAA4E;AAC/E,YAAA,QAAQ,GAAG,OAAO,CAAC,OAAR,CAAgB,UAAhB,CAAX;AACH,WAFM,MAEA;AACH,YAAA,iBAAiB,CAAC,UAAD,CAAjB,GAAgC,OAAO,CAAC,OAAR,CAAgB,UAAhB,CAAhC;AACH;AACJ;AACJ;AACJ;;AAED,WAAO,IAAI,uBAAJ,CACH,OAAO,CAAC,WADL,EAEH,IAFG,EAGH,SAHG,EAIH,WAJG,EAKH,OAAO,CAAC,IALL,EAMH,QANG,EAOH,iBAPG,EAQH,OAAO,CAAC,EARL,CAAP;AASH,GArCa;;AAsClB,SAAA,uBAAA;AAAC,CAtHD,CAA6C,SAAA,CAAA,iBAA7C,CAAA;;AAAa,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                        requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}