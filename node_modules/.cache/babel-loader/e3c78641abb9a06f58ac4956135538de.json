{"ast":null,"code":"import { __assign } from './_virtual/_tslib.js';\nimport { interpret } from 'xstate';\nimport { toSCXMLEvent, toEventObject, toObserver } from 'xstate/lib/utils';\nimport { getLazy, stringify, isReceiverEvent, parseReceiverEvent } from './utils.js';\nimport { createInspectMachine } from './inspectMachine.js';\nvar serviceMap = new Map();\n\nfunction createDevTools() {\n  var services = new Set();\n  var serviceListeners = new Set();\n  return {\n    services: services,\n    register: function (service) {\n      services.add(service);\n      serviceMap.set(service.sessionId, service);\n      serviceListeners.forEach(function (listener) {\n        return listener(service);\n      });\n      service.onStop(function () {\n        services.delete(service);\n        serviceMap.delete(service.sessionId);\n      });\n    },\n    unregister: function (service) {\n      services.delete(service);\n      serviceMap.delete(service.sessionId);\n    },\n    onRegister: function (listener) {\n      serviceListeners.add(listener);\n      services.forEach(function (service) {\n        return listener(service);\n      });\n      return {\n        unsubscribe: function () {\n          serviceListeners.delete(listener);\n        }\n      };\n    }\n  };\n}\n\nvar defaultInspectorOptions = {\n  url: 'https://statecharts.io/inspect',\n  iframe: function () {\n    return document.querySelector('iframe[data-xstate]');\n  },\n  devTools: function () {\n    var devTools = createDevTools();\n    globalThis.__xstate__ = devTools;\n    return devTools;\n  }\n};\n\nvar getFinalOptions = function (options) {\n  var withDefaults = __assign(__assign({}, defaultInspectorOptions), options);\n\n  return __assign(__assign({}, withDefaults), {\n    url: new URL(withDefaults.url),\n    iframe: getLazy(withDefaults.iframe),\n    devTools: getLazy(withDefaults.devTools)\n  });\n};\n\nfunction inspect(options) {\n  var _a = getFinalOptions(options),\n      iframe = _a.iframe,\n      url = _a.url,\n      devTools = _a.devTools;\n\n  if (iframe === null) {\n    console.warn('No suitable <iframe> found to embed the inspector. Please pass an <iframe> element to `inspect(iframe)` or create an <iframe data-xstate></iframe> element.');\n    return undefined;\n  }\n\n  var inspectMachine = createInspectMachine(devTools);\n  var inspectService = interpret(inspectMachine).start();\n  var listeners = new Set();\n  var sub = inspectService.subscribe(function (state) {\n    listeners.forEach(function (listener) {\n      return listener.next(state);\n    });\n  });\n  var targetWindow;\n  var client;\n\n  var messageHandler = function (event) {\n    if (typeof event.data === 'object' && event.data !== null && 'type' in event.data) {\n      if (iframe && !targetWindow) {\n        targetWindow = iframe.contentWindow;\n      }\n\n      if (!client) {\n        client = {\n          send: function (e) {\n            targetWindow.postMessage(e, url.origin);\n          }\n        };\n      }\n\n      var inspectEvent = __assign(__assign({}, event.data), {\n        client: client\n      });\n\n      inspectService.send(inspectEvent);\n    }\n  };\n\n  window.addEventListener('message', messageHandler);\n  window.addEventListener('unload', function () {\n    inspectService.send({\n      type: 'unload'\n    });\n  });\n  devTools.onRegister(function (service) {\n    var _a;\n\n    inspectService.send({\n      type: 'service.register',\n      machine: stringify(service.machine),\n      state: stringify(service.state || service.initialState),\n      sessionId: service.sessionId,\n      id: service.id,\n      parent: (_a = service.parent) === null || _a === void 0 ? void 0 : _a.sessionId\n    });\n    inspectService.send({\n      type: 'service.event',\n      event: stringify((service.state || service.initialState)._event),\n      sessionId: service.sessionId\n    }); // monkey-patch service.send so that we know when an event was sent\n    // to a service *before* it is processed, since other events might occur\n    // while the sent one is being processed, which throws the order off\n\n    var originalSend = service.send.bind(service);\n\n    service.send = function inspectSend(event, payload) {\n      inspectService.send({\n        type: 'service.event',\n        event: stringify(toSCXMLEvent(toEventObject(event, payload))),\n        sessionId: service.sessionId\n      });\n      return originalSend(event, payload);\n    };\n\n    service.subscribe(function (state) {\n      // filter out synchronous notification from within `.start()` call when the `service.state` has not yet been assigned\n      if (state === undefined) {\n        return;\n      }\n\n      inspectService.send({\n        type: 'service.state',\n        state: stringify(state),\n        sessionId: service.sessionId\n      });\n    });\n    service.onStop(function () {\n      inspectService.send({\n        type: 'service.stop',\n        sessionId: service.sessionId\n      });\n    });\n  });\n\n  if (iframe) {\n    iframe.addEventListener('load', function () {\n      targetWindow = iframe.contentWindow;\n    });\n    iframe.setAttribute('src', String(url));\n  } else {\n    targetWindow = window.open(String(url), 'xstateinspector');\n  }\n\n  return {\n    send: function (event) {\n      inspectService.send(event);\n    },\n    subscribe: function (next, onError, onComplete) {\n      var observer = toObserver(next, onError, onComplete);\n      listeners.add(observer);\n      observer.next(inspectService.state);\n      return {\n        unsubscribe: function () {\n          listeners.delete(observer);\n        }\n      };\n    },\n    disconnect: function () {\n      inspectService.send('disconnect');\n      window.removeEventListener('message', messageHandler);\n      sub.unsubscribe();\n    }\n  };\n}\n\nfunction createWindowReceiver(options) {\n  var _a = options || {},\n      _b = _a.window,\n      ownWindow = _b === void 0 ? window : _b,\n      _c = _a.targetWindow,\n      targetWindow = _c === void 0 ? window.self === window.top ? window.opener : window.parent : _c;\n\n  var observers = new Set();\n  var latestEvent;\n\n  var handler = function (event) {\n    var data = event.data;\n\n    if (isReceiverEvent(data)) {\n      latestEvent = parseReceiverEvent(data);\n      observers.forEach(function (listener) {\n        return listener.next(latestEvent);\n      });\n    }\n  };\n\n  ownWindow.addEventListener('message', handler);\n  var actorRef = {\n    id: 'xstate.windowReceiver',\n    send: function (event) {\n      if (!targetWindow) {\n        return;\n      }\n\n      targetWindow.postMessage(event, '*');\n    },\n    subscribe: function (next, onError, onComplete) {\n      var observer = toObserver(next, onError, onComplete);\n      observers.add(observer);\n      return {\n        unsubscribe: function () {\n          observers.delete(observer);\n        }\n      };\n    },\n    stop: function () {\n      observers.clear();\n      ownWindow.removeEventListener('message', handler);\n    },\n    getSnapshot: function () {\n      return latestEvent;\n    }\n  };\n  actorRef.send({\n    type: 'xstate.inspecting'\n  });\n  return actorRef;\n}\n\nfunction createWebSocketReceiver(options) {\n  var _a = options.protocol,\n      protocol = _a === void 0 ? 'ws' : _a;\n  var ws = new WebSocket(protocol + \"://\" + options.server);\n  var observers = new Set();\n  var latestEvent;\n  var actorRef = {\n    id: 'xstate.webSocketReceiver',\n    send: function (event) {\n      ws.send(JSON.stringify(event));\n    },\n    subscribe: function (next, onError, onComplete) {\n      var observer = toObserver(next, onError, onComplete);\n      observers.add(observer);\n      return {\n        unsubscribe: function () {\n          observers.delete(observer);\n        }\n      };\n    },\n    getSnapshot: function () {\n      return latestEvent;\n    }\n  };\n\n  ws.onopen = function () {\n    actorRef.send({\n      type: 'xstate.inspecting'\n    });\n  };\n\n  ws.onmessage = function (event) {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    try {\n      var eventObject = JSON.parse(event.data);\n\n      if (isReceiverEvent(latestEvent)) {\n        latestEvent = parseReceiverEvent(eventObject);\n        observers.forEach(function (observer) {\n          observer.next(latestEvent);\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  ws.onerror = function (err) {\n    observers.forEach(function (observer) {\n      var _a;\n\n      (_a = observer.error) === null || _a === void 0 ? void 0 : _a.call(observer, err);\n    });\n  };\n\n  return actorRef;\n}\n\nexport { createDevTools, createWebSocketReceiver, createWindowReceiver, inspect, serviceMap };","map":{"version":3,"sources":["/home/andrea/Desktop/breakfast_demo/node_modules/@xstate/inspect/es/browser.js"],"names":["__assign","interpret","toSCXMLEvent","toEventObject","toObserver","getLazy","stringify","isReceiverEvent","parseReceiverEvent","createInspectMachine","serviceMap","Map","createDevTools","services","Set","serviceListeners","register","service","add","set","sessionId","forEach","listener","onStop","delete","unregister","onRegister","unsubscribe","defaultInspectorOptions","url","iframe","document","querySelector","devTools","globalThis","__xstate__","getFinalOptions","options","withDefaults","URL","inspect","_a","console","warn","undefined","inspectMachine","inspectService","start","listeners","sub","subscribe","state","next","targetWindow","client","messageHandler","event","data","contentWindow","send","e","postMessage","origin","inspectEvent","window","addEventListener","type","machine","initialState","id","parent","_event","originalSend","bind","inspectSend","payload","setAttribute","String","open","onError","onComplete","observer","disconnect","removeEventListener","createWindowReceiver","_b","ownWindow","_c","self","top","opener","observers","latestEvent","handler","actorRef","stop","clear","getSnapshot","createWebSocketReceiver","protocol","ws","WebSocket","server","JSON","onopen","onmessage","eventObject","parse","error","onerror","err","call"],"mappings":"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","sourcesContent":["import { __assign } from './_virtual/_tslib.js';\nimport { interpret } from 'xstate';\nimport { toSCXMLEvent, toEventObject, toObserver } from 'xstate/lib/utils';\nimport { getLazy, stringify, isReceiverEvent, parseReceiverEvent } from './utils.js';\nimport { createInspectMachine } from './inspectMachine.js';\n\nvar serviceMap = new Map();\r\nfunction createDevTools() {\r\n    var services = new Set();\r\n    var serviceListeners = new Set();\r\n    return {\r\n        services: services,\r\n        register: function (service) {\r\n            services.add(service);\r\n            serviceMap.set(service.sessionId, service);\r\n            serviceListeners.forEach(function (listener) { return listener(service); });\r\n            service.onStop(function () {\r\n                services.delete(service);\r\n                serviceMap.delete(service.sessionId);\r\n            });\r\n        },\r\n        unregister: function (service) {\r\n            services.delete(service);\r\n            serviceMap.delete(service.sessionId);\r\n        },\r\n        onRegister: function (listener) {\r\n            serviceListeners.add(listener);\r\n            services.forEach(function (service) { return listener(service); });\r\n            return {\r\n                unsubscribe: function () {\r\n                    serviceListeners.delete(listener);\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\r\nvar defaultInspectorOptions = {\r\n    url: 'https://statecharts.io/inspect',\r\n    iframe: function () {\r\n        return document.querySelector('iframe[data-xstate]');\r\n    },\r\n    devTools: function () {\r\n        var devTools = createDevTools();\r\n        globalThis.__xstate__ = devTools;\r\n        return devTools;\r\n    }\r\n};\r\nvar getFinalOptions = function (options) {\r\n    var withDefaults = __assign(__assign({}, defaultInspectorOptions), options);\r\n    return __assign(__assign({}, withDefaults), { url: new URL(withDefaults.url), iframe: getLazy(withDefaults.iframe), devTools: getLazy(withDefaults.devTools) });\r\n};\r\nfunction inspect(options) {\r\n    var _a = getFinalOptions(options), iframe = _a.iframe, url = _a.url, devTools = _a.devTools;\r\n    if (iframe === null) {\r\n        console.warn('No suitable <iframe> found to embed the inspector. Please pass an <iframe> element to `inspect(iframe)` or create an <iframe data-xstate></iframe> element.');\r\n        return undefined;\r\n    }\r\n    var inspectMachine = createInspectMachine(devTools);\r\n    var inspectService = interpret(inspectMachine).start();\r\n    var listeners = new Set();\r\n    var sub = inspectService.subscribe(function (state) {\r\n        listeners.forEach(function (listener) { return listener.next(state); });\r\n    });\r\n    var targetWindow;\r\n    var client;\r\n    var messageHandler = function (event) {\r\n        if (typeof event.data === 'object' &&\r\n            event.data !== null &&\r\n            'type' in event.data) {\r\n            if (iframe && !targetWindow) {\r\n                targetWindow = iframe.contentWindow;\r\n            }\r\n            if (!client) {\r\n                client = {\r\n                    send: function (e) {\r\n                        targetWindow.postMessage(e, url.origin);\r\n                    }\r\n                };\r\n            }\r\n            var inspectEvent = __assign(__assign({}, event.data), { client: client });\r\n            inspectService.send(inspectEvent);\r\n        }\r\n    };\r\n    window.addEventListener('message', messageHandler);\r\n    window.addEventListener('unload', function () {\r\n        inspectService.send({ type: 'unload' });\r\n    });\r\n    devTools.onRegister(function (service) {\r\n        var _a;\r\n        inspectService.send({\r\n            type: 'service.register',\r\n            machine: stringify(service.machine),\r\n            state: stringify(service.state || service.initialState),\r\n            sessionId: service.sessionId,\r\n            id: service.id,\r\n            parent: (_a = service.parent) === null || _a === void 0 ? void 0 : _a.sessionId\r\n        });\r\n        inspectService.send({\r\n            type: 'service.event',\r\n            event: stringify((service.state || service.initialState)._event),\r\n            sessionId: service.sessionId\r\n        });\r\n        // monkey-patch service.send so that we know when an event was sent\r\n        // to a service *before* it is processed, since other events might occur\r\n        // while the sent one is being processed, which throws the order off\r\n        var originalSend = service.send.bind(service);\r\n        service.send = function inspectSend(event, payload) {\r\n            inspectService.send({\r\n                type: 'service.event',\r\n                event: stringify(toSCXMLEvent(toEventObject(event, payload))),\r\n                sessionId: service.sessionId\r\n            });\r\n            return originalSend(event, payload);\r\n        };\r\n        service.subscribe(function (state) {\r\n            // filter out synchronous notification from within `.start()` call when the `service.state` has not yet been assigned\r\n            if (state === undefined) {\r\n                return;\r\n            }\r\n            inspectService.send({\r\n                type: 'service.state',\r\n                state: stringify(state),\r\n                sessionId: service.sessionId\r\n            });\r\n        });\r\n        service.onStop(function () {\r\n            inspectService.send({\r\n                type: 'service.stop',\r\n                sessionId: service.sessionId\r\n            });\r\n        });\r\n    });\r\n    if (iframe) {\r\n        iframe.addEventListener('load', function () {\r\n            targetWindow = iframe.contentWindow;\r\n        });\r\n        iframe.setAttribute('src', String(url));\r\n    }\r\n    else {\r\n        targetWindow = window.open(String(url), 'xstateinspector');\r\n    }\r\n    return {\r\n        send: function (event) {\r\n            inspectService.send(event);\r\n        },\r\n        subscribe: function (next, onError, onComplete) {\r\n            var observer = toObserver(next, onError, onComplete);\r\n            listeners.add(observer);\r\n            observer.next(inspectService.state);\r\n            return {\r\n                unsubscribe: function () {\r\n                    listeners.delete(observer);\r\n                }\r\n            };\r\n        },\r\n        disconnect: function () {\r\n            inspectService.send('disconnect');\r\n            window.removeEventListener('message', messageHandler);\r\n            sub.unsubscribe();\r\n        }\r\n    };\r\n}\r\nfunction createWindowReceiver(options) {\r\n    var _a = options || {}, _b = _a.window, ownWindow = _b === void 0 ? window : _b, _c = _a.targetWindow, targetWindow = _c === void 0 ? window.self === window.top ? window.opener : window.parent : _c;\r\n    var observers = new Set();\r\n    var latestEvent;\r\n    var handler = function (event) {\r\n        var data = event.data;\r\n        if (isReceiverEvent(data)) {\r\n            latestEvent = parseReceiverEvent(data);\r\n            observers.forEach(function (listener) { return listener.next(latestEvent); });\r\n        }\r\n    };\r\n    ownWindow.addEventListener('message', handler);\r\n    var actorRef = {\r\n        id: 'xstate.windowReceiver',\r\n        send: function (event) {\r\n            if (!targetWindow) {\r\n                return;\r\n            }\r\n            targetWindow.postMessage(event, '*');\r\n        },\r\n        subscribe: function (next, onError, onComplete) {\r\n            var observer = toObserver(next, onError, onComplete);\r\n            observers.add(observer);\r\n            return {\r\n                unsubscribe: function () {\r\n                    observers.delete(observer);\r\n                }\r\n            };\r\n        },\r\n        stop: function () {\r\n            observers.clear();\r\n            ownWindow.removeEventListener('message', handler);\r\n        },\r\n        getSnapshot: function () {\r\n            return latestEvent;\r\n        }\r\n    };\r\n    actorRef.send({\r\n        type: 'xstate.inspecting'\r\n    });\r\n    return actorRef;\r\n}\r\nfunction createWebSocketReceiver(options) {\r\n    var _a = options.protocol, protocol = _a === void 0 ? 'ws' : _a;\r\n    var ws = new WebSocket(protocol + \"://\" + options.server);\r\n    var observers = new Set();\r\n    var latestEvent;\r\n    var actorRef = {\r\n        id: 'xstate.webSocketReceiver',\r\n        send: function (event) {\r\n            ws.send(JSON.stringify(event));\r\n        },\r\n        subscribe: function (next, onError, onComplete) {\r\n            var observer = toObserver(next, onError, onComplete);\r\n            observers.add(observer);\r\n            return {\r\n                unsubscribe: function () {\r\n                    observers.delete(observer);\r\n                }\r\n            };\r\n        },\r\n        getSnapshot: function () {\r\n            return latestEvent;\r\n        }\r\n    };\r\n    ws.onopen = function () {\r\n        actorRef.send({\r\n            type: 'xstate.inspecting'\r\n        });\r\n    };\r\n    ws.onmessage = function (event) {\r\n        if (typeof event.data !== 'string') {\r\n            return;\r\n        }\r\n        try {\r\n            var eventObject = JSON.parse(event.data);\r\n            if (isReceiverEvent(latestEvent)) {\r\n                latestEvent = parseReceiverEvent(eventObject);\r\n                observers.forEach(function (observer) {\r\n                    observer.next(latestEvent);\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n    ws.onerror = function (err) {\r\n        observers.forEach(function (observer) {\r\n            var _a;\r\n            (_a = observer.error) === null || _a === void 0 ? void 0 : _a.call(observer, err);\r\n        });\r\n    };\r\n    return actorRef;\r\n}\n\nexport { createDevTools, createWebSocketReceiver, createWindowReceiver, inspect, serviceMap };\n"]},"metadata":{},"sourceType":"module"}