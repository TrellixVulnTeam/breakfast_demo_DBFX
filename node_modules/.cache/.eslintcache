[{"/home/andrea/Desktop/breakfast_demo/src/index.tsx":"1","/home/andrea/Desktop/breakfast_demo/src/dmBreakfast.ts":"2","/home/andrea/Desktop/breakfast/src/index.tsx":"3","/home/andrea/Desktop/breakfast/src/dmBreakfast.ts":"4"},{"size":16677,"mtime":1649325230988,"results":"5","hashOfConfig":"6"},{"size":4995,"mtime":1650526293336,"results":"7","hashOfConfig":"6"},{"size":13961,"mtime":1648835370985,"results":"8","hashOfConfig":"9"},{"size":2377,"mtime":1648677972077,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1qc6vgw",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18hjj1v",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/andrea/Desktop/breakfast_demo/src/index.tsx",[],["21","22"],"/home/andrea/Desktop/breakfast_demo/src/dmBreakfast.ts",["23"],"/*\n(convered)\nEXAMPLE: SearchL2 + AskL1 + ProvL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nS> ¿Cómo se dice 'mermelada'? (<trans: how do you say jam?)\nT> Jam\nS> Jam\n(it repeats until S pronounces the word 'jam' correctly)\nT> Uh-huh\n\n\n\n\n(not convered so far)\nEXAMPLE: SearchL2 + ProvL1 + AskL1\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nS> Mermelada (<trans: jam>)\nS> ¿Cómo se dice? (<trans: how do you say it?)\nT> Jam\nS> Jam\nT> Jam\n\n\n\nT> What did you have for breakfast this morning?\nS> I had a toast with butter and…\nT> \n*/\n\n\nimport { MachineConfig, send, assign, Action } from \"xstate\";\n\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\n\nconst esDict: { [index: string]: string } = {\n    'mermelada': 'jam.',\n    'mantequilla': 'butter.',\n    'tostada': 'toast.',\n    'cereales': 'cereals.',\n    'leche': 'milk.',\n    'café': 'coffee.',\n    'zumo': 'juice.',\n    'queso': 'cheese.',\n    'tortitas': 'pancakes.',\n    'jamón': 'ham.',\n    'yogur': 'yogurt.',\n    'aceite': 'olive oil',\n    'fruta': 'fruit.',\n    'tomate': 'tomato.'\n\n}\n\n\nlet askL1 = [\"cómo se dice\",\"cómo es\"]\n//indask --> no sé cómo se dice\n\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'welcome',\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    { target: 'helpWord', cond: (context) => context.recResultL2[0].utterance.toLowerCase().includes(\"cómo se dice\") },\n                    //{ target: 'helpWord', cond: (context) => askL1.map((x) => context.recResultL2[0].utterance.toLowerCase().includes(x)).reduce((a,b) => a||b) },\n                    { target: 'unrelated' }],\n                TIMEOUT: '..',\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What did you have for breakfast this morning?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                }\n            }\n        },\n        helpWord: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: [\n                        assign((context, event) => { return { unknownWord: esDict[context.recResultL2[0].utterance.split(\" \")[context.recResultL2[0].utterance.split(\" \").length - 1].replace(/[?!]/, \"\")] } }),\n                        send((context: SDSContext) => ({\n                        type: \"SPEAK\",\n                        value: context.unknownWord\n                    }))],\n                    on: { ENDSPEECH: 'test' }\n                },\n                test: {\n                    entry: send('LISTEN'),\n                    on: { RECOGNISED: \n                        [\n                        {target: 'ack', cond: (context) => context.unknownWord === context.recResult[0].utterance.toLowerCase()},\n                        {target: 'provL2'}\n                    ] \n                }\n                },\n                ack: {\n                    entry: say(\"Uh-huh\"),\n                    on: { ENDSPEECH: '#root.dm.secondQuestion' }\n                },\n                provL2: {\n                    entry: [\n                        send((context: SDSContext) => ({\n                        type: \"SPEAK\",\n                        value: context.unknownWord\n                    }))],\n                    on: { ENDSPEECH: 'test' }\n                }\n\n            }\n        },\n        unrelated: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: say(\"Yummy!\"),\n                    on: { ENDSPEECH: 'unrelated' }\n                },\n                unrelated: {\n                    always: '#root.dm.secondQuestion'\n                }\n            }\n        },\n        secondQuestion: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    { target: 'stop', cond: (context) => context.recResult[0].utterance === 'No.' },\n                    { target: 'helpWord', cond: (context) => context.recResultL2[0].utterance.toLowerCase().includes(\"cómo se dice\") },\n                    { target: 'unrelated' }],\n                TIMEOUT: '..',\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Did you have anything else?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                }\n            }\n        },\n        stop: {\n            entry: say(\"Ok, good breakfast!\"),\n            always: 'init'\n        },\n    }\n})\n\n","/home/andrea/Desktop/breakfast/src/index.tsx",[],"/home/andrea/Desktop/breakfast/src/dmBreakfast.ts",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":64,"column":5,"nodeType":"30","messageId":"31","endLine":64,"endColumn":10},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"@typescript-eslint/no-unused-vars","'askL1' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]